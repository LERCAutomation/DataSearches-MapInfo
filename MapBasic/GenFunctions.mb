'* DataSearches is a MapInfo tool to lists all the available MapInfo
'* habitat, species and other layers and allows the user to select
'* which layers to extract for the current data search.
'*
'* Copyright © 2013 - 2019 GiGL, TVERC, SBIC
'* 
'* This file is part of the MapInfo tool 'DataSearches'.
'* 
'* DataSearches is free software: you can redistribute it and/or modify
'* it under the terms of the GNU General Public License as published by
'* the Free Software Foundation, either version 3 of the License, or
'* (at your option) any later version.
'* 
'* DataSearches is distributed in the hope that it will be useful,
'* but WITHOUT ANY WARRANTY; without even the implied warranty of
'* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'* GNU General Public License for more details.
'* 
'* You should have received a copy of the GNU General Public License
'* along with DataSearches.  If not, see <http://www.gnu.org/licenses/>.
'*
'***************************************************************
'* GenFunctions v1.44
'*
'* Contains general functions used by the DataSearches tool.
'*
'*
'* Created:			Andy Foy - February 2013
'* Last revised:	Andy Foy - July 2019
'*
'* *****************  Version 1.44  *****************
'* Author: Andy Foy		Date: 02/07/2019
'* A. Added function to get a list of files from a directory.
'*
'* *****************  Version 1.43  *****************
'* Author: Andy Foy		Date: 27/02/2019
'* A. Added functions to return userid and execute and wait.
'* 
'***************************************************************
Include "DataSearches.def"

Function TableIsOpen(ByVal sTabName As String) As Logical
'*************************************************
'* Check if the table is open
'*************************************************

	'-------------------------------------------------
	' Determine the number of open tables
	'-------------------------------------------------
	Dim iCounter, iNumberOfTables As Integer
	iNumberOfTables = NumTables()

	'-------------------------------------------------
	' Return FALSE if there are no open tables
	'-------------------------------------------------
	If iNumberOfTables = 0 Then
		TableIsOpen = FALSE
		Exit Function
	End If

	'-------------------------------------------------
	' Loop through the open tables looking for the
	' require table name. If found return TRUE
	'-------------------------------------------------
	For iCounter = 1 to iNumberOfTables
		If TableInfo(iCounter, TAB_INFO_NAME) = sTabName Then
			TableIsOpen = TRUE
			Exit Function
		End If
	Next

End Function

Function TabFileExists(ByVal sTabFileName As String) As Logical
'*************************************************
'* Check if the tab file exists
'*************************************************

	'-------------------------------------------------
	' Determine if the .tab file exists
	'-------------------------------------------------
	If FileExists(sTabFileName) = False THEN
		TabFileExists = False
		Exit Function
	End If

	'OnError Goto ErrorTrap
	
	'-------------------------------------------------
	' Try and open the .tab file as a temporary file
	'-------------------------------------------------
	'Dim sCmd As String
	'sCmd = "Open Table " + Chr$(34) + sTabFileName + Chr$(34) + " As TempXYZ"
	'Run Command (sCmd)

	'-------------------------------------------------
	' Close the temporary file
	'-------------------------------------------------
	'sCmd = "Close Table TempXYZ"
	'Run Command (sCmd)

	TabFileExists = True
	Exit Function

ErrorTrap:
	TabFileExists = False

End Function

Function StringToArrays(ByVal sString As String, aArrayA() As String, aArrayB() As String, sDelimRows As String, sDelimCols As String) As Integer
'*************************************************
'* Split a 2-dimensional array string to two
'* arrays
'*************************************************

Dim iPosSepRow As Integer, iPosSepCol As Integer
Dim iLastPosSepRow As Integer, iLastPosSepCol As Integer
Dim iLenString As Integer
Dim iThisRow As Integer
Dim iLenSepRow As Integer, iLenSepCol As Integer
    
	iLenString = Len(sString)
	iThisRow = 0
    
	If iLenString > 0 Then

       iLenSepRow = Len(sDelimRows)
       iLenSepCol = Len(sDelimCols)
		
		iPosSepRow = InStr(1, sString, sDelimRows)
       iPosSepCol = InStr(iPosSepRow, sString, sDelimCols)

       iLastPosSepRow = 1 - iLenSepCol
       iLastPosSepCol = 1 - iLenSepRow

       Do While iPosSepRow > 0

			iThisRow = iThisRow + 1

			' Store Row
			aArrayA(iThisRow) = Mid$(sString, iLastPosSepCol + iLenSepCol, iPosSepRow - iLastPosSepCol - iLenSepCol)
			aArrayB(iThisRow) = Mid$(sString, iPosSepRow + iLenSepRow, iPosSepCol - iPosSepRow - iLenSepRow)

			' Store the last positions
	       iLastPosSepRow = iPosSepRow
	       iLastPosSepCol = iPosSepCol

			' Find the next positions
			iPosSepRow = InStr(iLastPosSepRow + iLenSepRow, sString, sDelimRows)
	       iPosSepCol = InStr(iLastPosSepCol + iLenSepCol, sString, sDelimCols)

       Loop

		ReDim aArrayA(iThisRow)
		ReDim aArrayB(iThisRow)

	End If

	StringToArrays = iThisRow

End Function

Function IsNumeric (ByVal sVal As String) As Logical
'*************************************************
'* Check if a string is numeric (as a float value)
'*************************************************
Dim i As Integer

	IsNumeric = 0

	For i = 1 to Len(sVal)
		If Not InStr(1, " 0123456789.+-e", Mid$(sVal,i,1)) Then
			'String contains a non-numeric character!
			Exit Function
		End If
	Next

	IsNumeric = 1

End Function 

Function KeepNumbersAndSpaces(ByVal strInput As String, repChar As String) As String
'*************************************************
'* Remove alphabetic and special characters from a sting, leaving
'* only numerics, spaces and the default replace character.
'*************************************************
Dim i As Integer, c As String, strReturn as String

	strReturn = ""

	For i = 1 To Len(strInput)  ' Do with each Character in input string...
	    c = Mid$(strInput, i, 1) ' Get actual char

	    If IsNumeric(c) = True Or c = " " Or repChar = c Then ' If numeric or a space or the keep character then append to output
	        strReturn = strReturn & c
	    End If

	Next

	If Left$(strReturn, 1) = repChar then
		strReturn = Mid$(strReturn, 2, Len(strReturn) - 1)
	End If

	KeepNumbersAndSpaces = strReturn

End Function

Function RemoveSpecialChars(ByVal strInput As String, ByVal bIgnoreSlash As Logical) As String
'*************************************************
'* Remove any special characters from a sting that can't be used in
'* folder or file names.
'*************************************************

    strInput = StringReplace(strInput, "$", "")
    strInput = StringReplace(strInput, ":", "")
    strInput = StringReplace(strInput, "*", "")
    strInput = StringReplace(strInput, "/", "")
    strInput = StringReplace(strInput, "*", "")
    strInput = StringReplace(strInput, "?", "")
    strInput = StringReplace(strInput, "<", "")
    strInput = StringReplace(strInput, ">", "")
    strInput = StringReplace(strInput, "|", "")
    strInput = StringReplace(strInput, "%", "")

	If bIgnoreSlash = False Then
	    strInput = StringReplace(strInput, "\", "")
	End If

    RemoveSpecialChars = strInput

End Function

Function ReplaceSpecialChars(ByVal strInput As String, ByVal strRepChar As String, ByVal bIgnoreSlash As Logical) As String
'*************************************************
'* Remove any special characters from a sting that can't be used in
'* folder or file names.
'*************************************************

    strInput = StringReplace(strInput, "$", strRepChar)
    strInput = StringReplace(strInput, ":", strRepChar)
    strInput = StringReplace(strInput, "*", strRepChar)
    strInput = StringReplace(strInput, "/", strRepChar)
    strInput = StringReplace(strInput, "*", strRepChar)
    strInput = StringReplace(strInput, "?", strRepChar)
    strInput = StringReplace(strInput, "<", strRepChar)
    strInput = StringReplace(strInput, ">", strRepChar)
    strInput = StringReplace(strInput, "|", strRepChar)
    strInput = StringReplace(strInput, "%", strRepChar)

	If bIgnoreSlash = False Then
	    strInput = StringReplace(strInput, "\", strRepChar)
	End If

    strInput = StringReplace(strInput, strRepChar + strRepChar + strRepChar + strRepChar, strRepChar)
    strInput = StringReplace(strInput, strRepChar + strRepChar + strRepChar, strRepChar)
    strInput = StringReplace(strInput, strRepChar + strRepChar, strRepChar)
    strInput = StringReplace(strInput, strRepChar + strRepChar, strRepChar)

    ReplaceSpecialChars = strInput

End Function

Function StringReplace(ByVal sToBeSearched As String, ByVal sSearchFor As String, ByVal sReplaceWith As String) As String
'*************************************************
'* Finds and replaces one string with another
'* in a given string
'*************************************************
Dim i, nLenR, nLenS As Integer

	OnError GoTo ErrorOccured
	
	StringReplace = sToBeSearched
	
	nLenR = Len(sReplaceWith)
	nLenS = Len(sSearchFor)
	i = InStr(1, sToBeSearched, sSearchFor)
	Do While i > 0
	   sToBeSearched = Left$(sToBeSearched, i - 1) + sReplaceWith
	               + Right$(sToBeSearched, Len(sToBeSearched) - ((i - 1) + nLenS))
	   i = InStr(i + nLenR, sToBeSearched, sSearchFor)
	Loop
	
	StringReplace = sToBeSearched
	
	Exit Function

ErrorOccured:

End Function

Function ColumnExists(ByVal sTableName As String, ByVal sColName As String) As Logical
'*************************************************
'* Check if the column exists in the table
'*************************************************
Dim i, j As Integer
Dim sColName0 As String

	'-------------------------------------------------
	' Loop through all the columns looking for the
	' required name
	'-------------------------------------------------

	ColumnExists = False

	For i = 1 to TableInfo(sTableName, TAB_INFO_NCOLS)
 
       sColName0 = ColumnInfo(sTableName, "col"&i, COL_INFO_NAME)
		If UCase$(sColName) = UCase$(sColName0) Then
 			ColumnExists = True
			Exit For
		End If

	Next

End Function

Function CreatePath(ByVal sPath As String) As Logical
'*************************************************
'* Checks and creates all the folders in a path
'*************************************************
Dim i As Integer
Dim sFolder As String
Dim iSuccess, iSecurity As Integer

	OnError GoTo 0
	
	CreatePath = False
	
	' Find the first blackslash
	i = InStr(1, sPath, "\")
	Do While i > 0
	   sFolder = Left$(sPath, i - 1)

		' Check if the folder exists	   
		iSecurity = 0
		iSuccess = SetCurrentDirectory(sFolder)
		
		' If the folder doesn't exist
		If iSuccess = 0 Then

			' Create the folder
			iSuccess = 0
			iSuccess = CreateDirectory(sFolder, iSecurity)
			
			' If the folder couldn't be created
			if iSuccess = 0 Then
				GoTo ErrorOccured
			End If
		End If	   
	   
		' Find the next blackslash (or the end of the string)
	    If i < Len(sPath) Then
			i = InStr(i + 1, sPath, "\")
			If i = 0 Then
				i = Len(sPath) + 1
			End If
		Else
			i = 0
		End If
	Loop
	
	CreatePath = True
	
	Exit Function

ErrorOccured:
	Note "Error: " + str$(Err()) + ": " + Error$()

End Function

Function GetUserID() As String
'*************************************************
'* Get the User ID of the current user
'*************************************************

	'-------------------------------------------------
	' Loop through all the columns in the table and
	' sum the column lengths
	'-------------------------------------------------
	Dim sUserID As String ' receives name of the user
	Dim iLength As Integer ' length of the string
	Dim iRetVal As Integer ' return value

	'-------------------------------------------------
	' Create room in the buffer to receive the returned string
	'-------------------------------------------------
	sUserID = Space$(255)
	iLength = 255

	'-------------------------------------------------
	' Get the user id
	'-------------------------------------------------
	iRetVal = GetUserName(sUserID, iLength)

	'-------------------------------------------------
	' Extract the returned info from the buffer
	'-------------------------------------------------
	sUserID = Left$(sUserID, iLength - 1)

	GetUserID = sUserID

End Function

Function ExecuteAndWait(ByVal cmdLine as string) As Integer
'*************************************************
'* Execute a command and wait for it to finish
'*************************************************

	OnError Goto ErrorHandle

	Dim nRetVal As Integer, nExitCode As Integer
	Dim NameOfProc As Process_Information, NameStart As StartUpInfo
	Dim hProc As Integer

	NameStart.cb = 256
	NameStart.dwFlags = 1
	NameStart.wShowWindow = 0

	' Start the shelled application
	nRetVal = CreateProcessA(0, cmdLine, 0, 0, 1, NORMAL_PRIORITY_CLASS, 0, 0, NameStart, NameOfProc)

	' Get the handle of the started process
	hProc = NameOfProc.hProcess

	' Wait for the shelled application process to finish
	nRetVal = WaitForSingleObject(hProc, INFINITE)

	' Get the exit code from the shelled application
	nRetVal = GetExitCodeProcess(hProc, nExitCode)

	' Close the process handle
	nRetVal = CloseHandle(hProc)

	ExecuteAndWait = nExitCode

Exit Function

ErrorHandle:
	ExecuteAndWait = FALSE
	Note str$(Err()) + ": " + Error$()
	Call MyPrint(str$(Err()) + ": " + Error$())
	Exit Function

End Function

Function GetFileList(ByVal sFilePath as String, ByVal sFileFilter as String, sFileList() as String, sFileExclude As String) as Logical
'*************************************************
'* Get a list of files from a directory
'*************************************************
OnError Goto CatchEx

    Dim sFileName as String
    Dim sSubDirFileList() As String

    Dim iReturn as Integer 
    iReturn = 1

    Dim i as Integer, j as Integer
    i = 1 

    hFind = FindFirstFile(sFilePath & sFileFilter, wfd)

    sFileName = LTrim$(RTrim$(wfd.cFileName))

    If Len(sFileName) > 0 Then

       Do While iReturn <> 0

          If sFileName = "." or sFileName = ".." Then
            iReturn = FindNextFile(hFind, wfd)
            sFileName = LTrim$(RTrim$(wfd.cFileName))
         Else
           	sFileName = LTrim$(RTrim$(wfd.cFileName))
            If wfd.dwFileAttributes = FILE_ATTRIBUTE_DIRECTORY Then
               iReturn = GetFileList(sFilePath & sFileName & "\", sFileFilter, sSubDirFileList(), sFileExclude)
               For j = 1 to Ubound(sSubDirFileList)
                  ReDim sFileList(i)
                  sFileList(i) = sSubDirFileList(j)
                  i = i + 1 
               Next
               iReturn = FindNextFile(hFind, wfd)
            Else
               If UCase$(sFileName) <> UCase$(sFileExclude) Then
                   ReDim sFileList(i)
                   sFileList(i) = Left$(sFileName, Len(sFileName) - Len(sFileFilter) + 1)
	               i = i + 1
	           End If
               iReturn = FindNextFile(hFind, wfd)
            End If
         End If
      Loop
   End If

    iReturn = FindClose(hFind)
   GetFileList = true

 Done:
   Exit Sub
CatchEx:
   Note Error$()
   Resume Done
End Function
