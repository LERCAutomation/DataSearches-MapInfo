'* DataSearches is a MapInfo tool to lists all the available MapInfo
'* habitat, species and other layers and allows the user to select
'* which layers to extract for the current data search.
'*
'* Copyright © 2013 GiGL
'* Copyright © 2015 TVERC, GiGL
'* 
'* This file is part of the MapInfo tool 'DataSearches'.
'* 
'* DataSearches is free software: you can redistribute it and/or modify
'* it under the terms of the GNU General Public License as published by
'* the Free Software Foundation, either version 3 of the License, or
'* (at your option) any later version.
'* 
'* DataSearches is distributed in the hope that it will be useful,
'* but WITHOUT ANY WARRANTY; without even the implied warranty of
'* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'* GNU General Public License for more details.
'* 
'* You should have received a copy of the GNU General Public License
'* along with DataSearches.  If not, see <http://www.gnu.org/licenses/>.
'*
'***************************************************************
'*DataSearches v1.40
'*
'* Creates a dialog window which lists all the available MapInfo
'* habitat, species and other layers and allows the user to select
'* which layers to extract for the current data search.
'*
'*
'* Created:			Andy Foy - February 2013
'* Last revised:	Andy Foy - October 2015
'***************************************************************
Include "DataSearches.def"

Sub Main
'***************************************************************
'* Main sub-routine
'***************************************************************

	'-------------------------------------------------
	' Create a new menu
	'-------------------------------------------------
	Create Menu "&Data Searches" As
	   "&Run Data Searches ..." Calling OpenDialog,
	   "(-",
	   "&About Data Searches ..." Calling AboutBox,
	   "E&xit Data Searches" Calling egsit

	'-------------------------------------------------
	' Add the new menu item to the Tools menu
	'-------------------------------------------------
	Alter Menu "Tools" Add
		"Data Searches" As "Data Searches"

	Exit Sub

End Sub

Sub OpenDialog
'***************************************************************
'* Create the user dialog window
'***************************************************************

	'-------------------------------------------------
	' Trap errors
	'-------------------------------------------------
    OnError Goto ErrorTrap

	'-------------------------------------------------
	' Retrieve the default values from the config file
	'-------------------------------------------------
	Call GetDefaultValues

	'-------------------------------------------------
	' Build a new dialog window
	'-------------------------------------------------
	Dialog
		Title "Data Extractor"
		Width 235
		Height 250
		Position 50, 70
		Calling DialogSetup

	'-------------------------------------------------
	' Add an edit text box for the search reference
	'-------------------------------------------------
	Control StaticText Title "Search Ref:"
		Position 10,10
	Control EditText
		ID 1
		Position 10,20
		Width 65
		'Into sSearchRef

	'-------------------------------------------------
	' Add an edit text box for the site name
	'-------------------------------------------------
	Control StaticText Title "Site Name:"
		Position 10,40
	Control EditText
		ID 2
		Position 10,50
		Width 210
		Disable
		'Into sSiteName

	'-------------------------------------------------
	' Add a MapInfo table listbox
	'-------------------------------------------------
	Control StaticText Title "MapInfo Tables:"
		Position 10,70
	Control MultiListBox
		ID 3
		Title ""
		Position 10,80
		Height 140
		Width 95

	'-------------------------------------------------
	' Add an edit text box for the buffer size
	'-------------------------------------------------
	Control StaticText Title "Buffer Size:"
		Position 120,70
	Control EditText
		ID 4
		Value sDefaultBufferSize
		Position 120,80
		Width 60
		'Into sBufferSize

	'-------------------------------------------------
	' Add a radio group for the buffer units
	'-------------------------------------------------
	Control StaticText Title "Buffer Units:"
		Position 120,100
	Control PopupMenu
		ID 5
		Value iDefaultBufferUnit
		Title From Variable aBufferUnits
		Position 120,110
		Width 60
		'Into iBufferInt

	'-------------------------------------------------
	' Add a checkbox for clearing the log file
	'-------------------------------------------------
	Control CheckBox
		ID 6
		Title "Clear log file?"
		Position 10,230
		Value FALSE
		'Into bClearLog

	'-------------------------------------------------
	' Add a radio group for adding the selected tables
	' to the map window
	'-------------------------------------------------
	Control StaticText Title "Add Selected Tables to Map:"
		Position 120,135
	Control PopupMenu
		ID 9
		Value iDefaultAddSelectedTables
		Title sAddSelectedTablesOptions
		Position 120,145
		Width 100
		'Into iAddSelectedTables

	'-------------------------------------------------
	' Add a radio group for overwritting map labels
	'-------------------------------------------------
	Control StaticText Title "Overwrite Map Labels:"
		Position 120,170
	Control PopupMenu
		ID 10
		Value iDefaultOverwriteLabels
		Title sOverwriteLabelOptions
		Position 120,180
		Width 100
		'Into iOverwriteLabels

	'-------------------------------------------------
	' Add a checkbox for the combined sites table
	'-------------------------------------------------
	Control CheckBox
		ID 11
		Title "Create Combined Sites Table?"
		Position 120,205
		Value FALSE
		'Into bCreateCombinedSitesTable

	'-------------------------------------------------
	' Add Ok and cancel buttons
	'-------------------------------------------------
	Control CancelButton
		Position 140,230
		Width 40
	Control Button
		ID 99
		Title "Ok"
		Position 185,230
		Width 40
		Calling CheckSelection

Done:
	Exit Sub
	
ErrorTrap:
	Note "Error: " + str$(Err()) + ": " + Error$()
	Call MyPrint(str$(Err()) + ": " + Error$())
	Resume Done

End Sub

Sub GetDefaultValues
'***************************************************************
'* Retrieve all the default values from the config file
'* which is a XML document
'***************************************************************

	Dim bParseError As SmallInt
	Dim hXMLDoc As MIXmlDocument
	Dim hXMLRoot As MIXmlNode
	Dim hXMLNode As MIXmlNode
	Dim hXMLSubNode As MIXmlNode
	Dim hXMLFilesNodeParent As MIXmlNode
	Dim hXMLFilesNodeList As MIXMLNodeList
	Dim hXMLFilesNode As MIXmlNode

	OnError Goto GetDefaultsError

	'-------------------------------------------------
	' Create a document handle
	'-------------------------------------------------
	hXMLDoc = MIXmlDocumentCreate()
	If hXMLDoc Then

		'-------------------------------------------------
		' Load the document into the document handle
		'-------------------------------------------------
		Dim iXMLLoad As SmallInt
		iXMLLoad = MIXmlDocumentLoad(hXMLDoc, ApplicationDirectory$() + "DataSearches.xml", bParseError, FALSE, FALSE)
		if iXMLLoad > 0 Then

			'-------------------------------------------------
			' Get a handle on the XML root node of the document
			'-------------------------------------------------
			hXMLRoot = MIXmlDocumentGetRootNode(hXMLDoc)
			If hXMLRoot Then

				'-------------------------------------------------
				' Get a handle on the DataSearches node
				'-------------------------------------------------
				hXMLNode = MIXmlSelectSingleNode(hXMLRoot, "DataSearches")
				If hXMLNode Then
	
					'-------------------------------------------------
					' Load the default values from the child nodes
					' under the DataSearches node
					'-------------------------------------------------
					' The database where all the data search details are stored
					sDatabase = GetSingleNodeValue(hXMLNode, "Database")

					' The file location where the enquiries table will be stored
					sEnquiriesDir = GetSingleNodeValue(hXMLNode, "EnquiriesDir")

					' The character(s) used to replace any special characters in folder names
					sRepChar = GetSingleNodeValue(hXMLNode, "RepChar")

					' The file location where all data search folders are stored
					sSaveRootDir = GetSingleNodeValue(hXMLNode, "SaveRootDir")

					' The folder where the report will be saved
					sSaveFolder = GetSingleNodeValue(hXMLNode, "SaveFolder")

					' Sub-folder where all the extract files will be stored
					sGISFolder = GetSingleNodeValue(hXMLNode, "GISFolder")

					' Log file name prefix for storing output messages
					sLogFileName = GetSingleNodeValue(hXMLNode, "LogFileName")

					' Default size to use for the buffer
					sDefaultBufferSize = GetSingleNodeValue(hXMLNode, "DefaultBufferSize")

					' Default unit to use for the buffer
					iDefaultBufferUnit = GetSingleNodeValue(hXMLNode, "DefaultBufferUnit")

					' Options for the buffer units
					sBufferUnitOptions = GetSingleNodeValue(hXMLNode, "BufferUnitOptions")

					' Symbology for the buffer features
					sBufferSymbology = GetSingleNodeValue(hXMLNode, "BufferSymbology")

					' Maximum number of records to be downloaded at one time
					iRecMax = GetSingleNodeValue(hXMLNode, "RecMax")

					' Name of the table to use as the search area
					sSearchTable = GetSingleNodeValue(hXMLNode, "SearchTable")

					' Name of the column in the search table used to store the search reference
					sSearchColumn = GetSingleNodeValue(hXMLNode, "SearchColumn")

					' Column values used when buffering the search area in the search table
					sAggregateColumns = GetSingleNodeValue(hXMLNode, "AggregateColumns")

					' Options for adding the selected tables to the map window
					sAddSelectedTablesOptions = GetSingleNodeValue(hXMLNode, "AddSelectedTablesOptions")

					' Default option for adding selected tables to the map window
					iDefaultAddSelectedTables = GetSingleNodeValue(hXMLNode, "DefaultAddSelectedTables")

					' Options for for overwritting the map labels
					sOverwriteLabelOptions = GetSingleNodeValue(hXMLNode, "OverwriteLabelOptions")

					' Whether any map label columns should be overwritten
					iDefaultOverwriteLabels = GetSingleNodeValue(hXMLNode, "DefaultOverwriteLabels")

					' Whether a combined sites table should be created
					sDefaultCombinedSitesTable = GetSingleNodeValue(hXMLNode, "DefaultCombinedSitesTable")

					'-------------------------------------------------
					' Get a handle on the Combined Sites table sub-node
					'-------------------------------------------------
					hXMLSubNode = MIXmlSelectSingleNode(hXMLNode, "CombinedSitesTable")
					If hXMLSubNode Then
		
						' Table name of the combined sites table
						sCombinedSitesTable = GetSingleNodeValue(hXMLSubNode, "TableName")
						
						' Columns of the combined sites table
						sCombinedSitesColumns = GetSingleNodeValue(hXMLSubNode, "Columns")
						
						' Suffix of the combined sites table
						sCombinedSitesSuffix = GetSingleNodeValue(hXMLSubNode, "Suffix")
						
						' Format of the combined sites table
						sCombinedSitesFormat = GetSingleNodeValue(hXMLSubNode, "Format")
						
					End If

					'-------------------------------------------------
					' Get a handle on the MapTables node
					'-------------------------------------------------
					hXMLFilesNodeParent = MIXmlSelectSingleNode(hXMLNode, "MapTables")

					'-------------------------------------------------
					' Get a handle on the node map of the above node
					'-------------------------------------------------
					hXMLFilesNodeList = MIXMLGetChildList(hXMLFilesNodeParent)

					'-------------------------------------------------
					' Get a handle on the first attribute in the node map
					'-------------------------------------------------
					hXMLFilesNode = MIXMLGetNextNode(hXMLFilesNodeList)

					OnError Goto GetVariablesError

					'-------------------------------------------------
					' Loop through all the attributes in the node map
					' storing the names and statements in arrays
					'-------------------------------------------------
					Dim i As Integer
					i = 0
					Do while hXMLFilesNode
						
						i = i + 1

						' Name of the Map table
						aFileMapTables(i) = GetNodeName(hXMLFilesNode)

						' Local MapInfo name of the Map table
						aFileMapNames(i) = GetSingleNodeValue(hXMLFilesNode, "TableName")

						' Suffix applied to map table when saving
						aFileMapSuffixes(i) = GetSingleNodeValue(hXMLFilesNode, "Suffix")

						' SQL clause used to retrieve the required rows from the map table
						aFileMapColumns(i) = GetSingleNodeValue(hXMLFilesNode, "Columns")

						' SQL clause used to select or order the required rows from the map table
						aFileMapCriteria(i) = GetSingleNodeValue(hXMLFilesNode, "Criteria")

						' Key column used to determine unique records in the map table
						aFileMapKeyColumn(i) = GetSingleNodeValue(hXMLFilesNode, "KeyColumn")

						' Format required for the extract of the map table
						aFileMapFormats(i) = GetSingleNodeValue(hXMLFilesNode, "Format")

						' Format required for the extract of the map table
						aFileMapKeep(i) = GetSingleNodeValue(hXMLFilesNode, "KeepLayer")

						' Column name containing the map labels
						aFileMapLabelColumn(i) = GetSingleNodeValue(hXMLFilesNode, "LabelColumn")

						' Clause for setting the map labels
						aFileMapLabelClause(i) = GetSingleNodeValue(hXMLFilesNode, "LabelClause")

						' Column name(s) to include in the combined sites table
						aFileMapSiteColumns(i) = GetSingleNodeValue(hXMLFilesNode, "CombinedSitesColumns")

						' Criteria for selecting site details for the combined sites table
						aFileMapSiteCriteria(i) = GetSingleNodeValue(hXMLFilesNode, "CombinedSitesCriteria")

						'-------------------------------------------------
						' Get a handle on the next attribute in the node map
						'-------------------------------------------------
						hXMLFilesNode = MIXMLGetNextNode(hXMLFilesNodeList)
					Loop

					Redim aFileMapTables(i)
					Redim aFileMapNames(i)
					Redim aFileMapSuffixes(i)
					Redim aFileMapColumns(i)
					Redim aFileMapCriteria(i)
					Redim aFileMapKeyColumn(i)
					Redim aFileMapFormats(i)
					Redim aFileMapKeep(i)
					Redim aFileMapLabelColumn(i)
					Redim aFileMapLabelClause(i)
					Redim aFileMapSiteColumns(i)
					Redim aFileMapSiteCriteria(i)

				End If

			End If

		Else

			Note "Error: " + MIGetErrorMessage()
			Goto CleanUp

		End If

	End If

	'-------------------------------------------------
	' Seperate the Buffer Unit options into two arrays
	'-------------------------------------------------
	Dim sDelimRows As String, sDelimCols As String
	sDelimRows = ";"
	sDelimCols = "$"
	Dim iRows As Integer
	iRows = StringToArrays(sBufferUnitOptions, aBufferUnits(), aBufferAbbrevs(), sDelimRows, sDelimCols)
	If iRows = 0 Then
		Note "Error: No Buffer Units found"
		Goto CleanUp
	End If

CleanUp:
	'-------------------------------------------------
	' Destroy the handles
	'-------------------------------------------------
	If hXMLFilesNode Then Call MIXmlNodeDestroy(hXMLFilesNode) End If
	If hXMLFilesNodeList Then Call MIXmlNodeListDestroy(hXMLFilesNodeList) End If
	If hXMLFilesNodeParent Then Call MIXmlNodeDestroy(hXMLFilesNodeParent) End If
	If hXMLSubNode Then Call MIXmlNodeDestroy(hXMLSubNode) End If
	If hXMLNode Then Call MIXmlNodeDestroy(hXMLNode) End If
	If hXMLRoot Then Call MIXmlNodeDestroy(hXMLRoot) End If
	If hXMLDoc Then Call MIXmlDocumentDestroy(hXMLDoc) End If

	Exit Sub

GetDefaultsError:
	Note "Error: " + str$(Err()) + ": " + Error$()
	Exit Sub

GetVariablesError:
	Resume Next

End Sub

Sub DialogSetup
'***************************************************************
' Setup the dialog window listboxes
'***************************************************************

	'-------------------------------------------------
	' Clear the Message window and close it
	'-------------------------------------------------
	Print(Chr$(12))
	Close Window Message

	'-------------------------------------------------
	' Loop through all the MapInfo tables listed in the
	' config file and add them to the Map Tables list
	' if they are open in MapInfo
	'-------------------------------------------------

	Dim j As Integer
	j = 0
	Dim i As Integer
	For i = 1 to UBound(aFileMapTables)

		'-------------------------------------------------
		' Concatenate all the Map tables into an array
		'-------------------------------------------------
		If TableIsOpen(aFileMapNames(i)) Then
			j = j + 1

			aMapTables(j) = aFileMapTables(i)
			aMapNames(j) = aFileMapNames(i)
			aMapSuffixes(j) = aFileMapSuffixes(i)
			aMapColumns(j) = aFileMapColumns(i)
			aMapCriteria(j) = aFileMapCriteria(i)
			aMapKeyColumn(j) = aFileMapKeyColumn(i)
			aMapFormats(j) = aFileMapFormats(i)
			aMapKeep(j) = aFileMapKeep(i)
			aMapLabelColumn(j) = aFileMapLabelColumn(i)
			aMapLabelClause(j) = aFileMapLabelClause(i)
			aMapSiteColumns(j) = aFileMapSiteColumns(i)
			aMapSiteCriteria(j) = aFileMapSiteCriteria(i)
		Else
			Note "Warning: Table " + aFileMapTables(i) + " is not open as " + aFileMapNames(i)
		End If

	Next

	Redim aMapTables(j)
	Redim aMapNames(j)
	Redim aMapSuffixes(j)
	Redim aMapColumns(j)
	Redim aMapCriteria(j)
	Redim aMapKeyColumn(j)
	Redim aMapFormats(j)
	Redim aMapKeep(j)
	Redim aMapLabelColumn(j)
	Redim aMapLabelClause(j)
	Redim aMapSiteColumns(j)
	Redim aMapSiteCriteria(j)

	'-------------------------------------------------
	' Update the Map Table list to show the list of tables
	'-------------------------------------------------
	Alter Control 3 Title From Variable aMapTables

SetDefaults:

	'-------------------------------------------------
	' Set the default value for creating a combined
	' sites table
	'-------------------------------------------------
	If UCase$(sDefaultCombinedSitesTable) = "Y" OR UCase$(sDefaultCombinedSitesTable) = "YES" Then
		Alter Control 11 Value TRUE
	Else
		Alter Control 11 Value FALSE
	End If

	'-------------------------------------------------
	' Enable the site name field if there is no
	' database
	'-------------------------------------------------
	If sDatabase = "" Then
		Alter Control 2 Enable
	End If


Exit Sub

End Sub

Sub CheckSelection
'***************************************************************
'* Check the user's selections and process according
'***************************************************************

	'-------------------------------------------------
	' Store the dialog variables
	'-------------------------------------------------
	sSearchRef = ReadControlValue(1)
	If sDatabase = "" Then
		sSiteName = ReadControlValue(2)
	End If
	sBufferSize = ReadControlValue(4)
	iBufferInt = ReadControlValue(5)
	bClearLog = ReadControlValue(6)
	iAddSelectedTables = ReadControlValue(9)
	iOverwriteLabels = ReadControlValue(10)
	bCreateCombinedSitesTable = ReadControlValue(11)

	'-------------------------------------------------
	' Check if the user has entered a search reference
	'-------------------------------------------------
	If sSearchRef = "" Then
		Note "Error: No search reference has been entered!"
		Exit Sub
	End If

	'-------------------------------------------------
	' Check if the user has entered a site name
	'-------------------------------------------------
	If sSiteName = "" and sDatabase = "" Then
		Note "Error: No site name has been entered!"
		Exit Sub
	End If

	'-------------------------------------------------
	' Check if the user has selected at least one table
	'-------------------------------------------------
	iMapTable = ReadControlValue(3)
	if iMapTable = 0 then
		Note "Error: No tables have been selected!"
		Exit Sub
	End If

	'-------------------------------------------------
	' Count the number of extracts to run
	'-------------------------------------------------
	iExtractTot = 0
	iExtractCnt = 0
	Do While iMapTable > 0
		'-------------------------------------------------
		' Increment the counter
		'-------------------------------------------------
		iExtractTot = iExtractTot + 1

		aMapTableSelected(iExtractTot) = aMapTables(iMapTable)
		aMapNameSelected(iExtractTot) = aMapNames(iMapTable)
		aMapSuffixSelected(iExtractTot) = aMapSuffixes(iMapTable)
		aMapColumnsSelected(iExtractTot) = aMapColumns(iMapTable)
		aMapCriteriaSelected(iExtractTot) = aMapCriteria(iMapTable)
		aMapKeyColumnSelected(iExtractTot) = aMapKeyColumn(iMapTable)
		aMapFormatSelected(iExtractTot) = aMapFormats(iMapTable)
		aMapKeepSelected(iExtractTot) = aMapKeep(iMapTable)
		aMapLabelColumnSelected(iExtractTot) = aMapLabelColumn(iMapTable)
		aMapLabelClauseSelected(iExtractTot) = aMapLabelClause(iMapTable)
		aMapSiteColumnsSelected(iExtractTot) = aMapSiteColumns(iMapTable)
		aMapSiteCriteriaSelected(iExtractTot) = aMapSiteCriteria(iMapTable)

		'-------------------------------------------------
		' Read the next table selected in the list
		'-------------------------------------------------
		iMapTable = ReadControlValue(3)
	Loop

	'-------------------------------------------------
	' Check if the user has entered a buffer size
	'-------------------------------------------------
	If sBufferSize = "" Then
		Note "Error: No buffer size has been entered!"
		Exit Sub
	End If
	If isNumeric(ReadControlValue(4)) = False Then
		Note "Error: The buffer size is not numeric!"
		Exit Sub
	End If

	'-------------------------------------------------
	' Check if the user has selected a buffer unit
	'-------------------------------------------------
	If iBufferInt = 0 Then
		Note "Error: No buffer unit has been selected!"
		Exit Sub
	End If

	'-------------------------------------------------
	' Close the dialog
	'-------------------------------------------------
	Dialog Remove

	'-------------------------------------------------
	' Store the buffer unit option
	'-------------------------------------------------
	sBufferUnit = aBufferAbbrevs(iBufferInt)

	'-------------------------------------------------
	' Get the site name from the database if it has
	' a path/name
	'-------------------------------------------------
	If sDatabase <> "" Then

		'-------------------------------------------------
		' Check if the Enquiries table is
		' already/still open and close it if it is
		'-------------------------------------------------
		If TableIsOpen("Enquiries") Then
			Close Table Enquiries
		End If
	
		OnError Goto RegisterTable
	
		'-------------------------------------------------
		' Open the 'Enquiries' table
		'-------------------------------------------------
		Dim sCmd As String
		sCmd = "Open Table " + Chr$(34) + sEnquiriesTable + Chr$(34) + " As Enquiries"
		Run Command (sCmd)
	
RegisterTable:
	
		OnError Goto 0
	
		If TableIsOpen("Enquiries") = False Then
	
			'-------------------------------------------------
			' Register the 'Enquiries' table from the database
			'-------------------------------------------------
			Dim sEnquiriesTable As String
			sEnquiriesTable = sEnquiriesDir + "\Enquiries.tab"
			sCmd = "Register Table " + Chr$(34) + sDatabase + Chr$(34) + " Type ACCESS Table " + Chr$(34) + "Enquiries" + Chr$(34) + " Into " + Chr$(34) + sEnquiriesTable + Chr$(34)
			Run Command (sCmd)
		
			'-------------------------------------------------
			' Open the 'Enquiries' table
			'-------------------------------------------------
			sCmd = "Open Table " + Chr$(34) + sEnquiriesTable + Chr$(34) + " As Enquiries"
			Run Command (sCmd)
			
		End If
	
		'-------------------------------------------------
		' Select the site name for the enquiry
		'-------------------------------------------------
		sCmd = "Select SiteName From Enquiries Where EnquiryRef = " + Chr$(34) + sSearchRef + Chr$(34) + " Into Enquiry NoSelect"
		Run Command (sCmd)
	
		'-------------------------------------------------
		' Count the number of rows selected
		'-------------------------------------------------
		Dim iRows As Integer
		iRows = TableInfo("Enquiry", TAB_INFO_NROWS)
	
		'-------------------------------------------------
		' If any rows were selected then set the object
		'-------------------------------------------------
		If iRows > 0 Then
	
			'-------------------------------------------------
			' Fetch the first of the selected rows
			'-------------------------------------------------
			Fetch First from Enquiry
	
			'-------------------------------------------------
			' Get the site name value
			'-------------------------------------------------
			sSiteName = Enquiry.SiteName
	
		Else
	
			Note "Warning: Site name not found in database!"
	
		End If
	
		'-------------------------------------------------
		' Close the 'Enquiries' table
		'-------------------------------------------------
		Close Table Enquiries
		
	End If

	'-------------------------------------------------
    ' Remove all characters except numbers and internal spaces from Reference Number
	'-------------------------------------------------
    sShortRefNo = StringReplace(sSearchRef, "/", sRepChar)
    sShortRefNo = LTrim$(RTrim$(KeepNumbersAndSpaces(sShortRefNo, sRepChar)))
    sSubRefNo = Right$(sShortRefNo, 3)
    
	'-------------------------------------------------
    ' Replace any variables
	'-------------------------------------------------
    sSaveFolder = StringReplace(sSaveFolder, "%ref%", sSearchRef)
    sSaveFolder = StringReplace(sSaveFolder, "%shortref%", sShortRefNo)
    sSaveFolder = StringReplace(sSaveFolder, "%subref%", sSubRefNo)
    sSaveFolder = StringReplace(sSaveFolder, "%sitename%", sSiteName)
    
    sGISFolder = StringReplace(sGISFolder, "%ref%", sSearchRef)
    sGISFolder = StringReplace(sGISFolder, "%shortref%", sShortRefNo)
    sGISFolder = StringReplace(sGISFolder, "%subref%", sSubRefNo)
    sGISFolder = StringReplace(sGISFolder, "%sitename%", sSiteName)
    
    sLogFileName = StringReplace(sLogFileName, "%ref%", sSearchRef)
    sLogFileName = StringReplace(sLogFileName, "%shortref%", sShortRefNo)
    sLogFileName = StringReplace(sLogFileName, "%subref%", sSubRefNo)
    sLogFileName = StringReplace(sLogFileName, "%sitename%", sSiteName)
    
	'-------------------------------------------------
    ' Remove any invalid characters file/folder names
	'-------------------------------------------------
    sSaveFolder = LTrim$(RTrim$(RemoveSpecialChars(sSaveFolder)))
    sGISFolder = LTrim$(RTrim$(RemoveSpecialChars(sGISFolder)))
    sLogFileName = LTrim$(RTrim$(RemoveSpecialChars(sLogFileName)))
	
	'-------------------------------------------------
	' Create the request folder if it doesn't
	' already exist
	'-------------------------------------------------
	Dim sRootPath As String
	If sSaveFolder = "" then
		sRootPath = sSaveRootDir
	Else
		sRootPath = sSaveRootDir + "\" + sSaveFolder
	End If
	
	Dim iSuccess, iSecurity As Integer
	iSecurity = 0
	iSuccess = SetCurrentDirectory(sRootPath)
	if iSuccess = 0 Then
		iSuccess = CreateDirectory(sRootPath, iSecurity)
		if iSuccess = 0 Then
			Note "Error: Unable to create search folder. Process terminated."
			Exit Sub
		End If
	End If
	
	'-------------------------------------------------
	' Create the GIS sub-folder if it doesn't
	' already exist
	'-------------------------------------------------
	If sGISFolder = "" then
		sLocalPath = sRootPath
	Else
		sLocalPath = sRootPath + "\" + sGISFolder
	End If
	
	iSecurity = 0
	iSuccess = SetCurrentDirectory(sLocalPath)
	if iSuccess = 0 Then
		iSuccess = CreateDirectory(sLocalPath, iSecurity)
		if iSuccess = 0 Then
			Note "Error: Unable to create search sub-folder. Process terminated."
			Exit Sub
		End If
	End If
	
	'-------------------------------------------------
	' Set the log file name for the output messages
	'-------------------------------------------------
	sLogFile = sLocalPath + "\" + sLogFileName
	
	'-------------------------------------------------
	' Clear the log file
	'-------------------------------------------------
	If bClearLog = True Then
		If FileExists(sLogFile) Then
			Kill sLogFile
		End If
	End If

	Call MyPrint("----------------------------------------------------------------------")
	Call MyPrint("Processing search '" + sSearchRef + "' ...")
	Call MyPrint("----------------------------------------------------------------------")
	Call MyPrint("")

	'-------------------------------------------------
	' Find the window numbers of all map windows
	'-------------------------------------------------
	Dim iNumWindows As Integer
	iNumWindows = NumWindows()
	Dim iWindowNum As Integer, iNum As Integer
	iNum = 0
	For iWindowNum = 1 to iNumWindows
		If WindowInfo(WindowId(iWindowNum),WIN_INFO_TYPE) = WIN_MAPPER Then
			iNum = iNum + 1
			aWindowId(iNum) = WindowId(iWindowNum)
		End If
	Next
	Redim aWindowId(iNum)

	'-------------------------------------------------
	' Call the subroutine to buffer the search area
	' with the required size and units
	'-------------------------------------------------
	Call BufferSearch
	Dim lResponse As Logical
	If sBufferTable = "" Then
		Call MyPrint("Error buffering search reference.")
		Call MyPrint("")
		Call MyPrint("----------------------------------------------------------------------")
		Call MyPrint("Process stopped!")
		Call MyPrint("----------------------------------------------------------------------")
		lResponse = Ask("Process stopped!" + Chr$(10) + Chr$(10) + Chr$(10) + "Show log file?", "Yes", "No")
		Goto Response
	End If

	'-------------------------------------------------
	' Call the subroutine to create the combined
	' sites table.
	'-------------------------------------------------
	If bCreateCombinedSitesTable Then
		Call CreateCombinedSitesTable
		If sCombinedSitesTable = "" Then
			Call MyPrint("Error creating combined sites table.")
			Call MyPrint("")
			Call MyPrint("----------------------------------------------------------------------")
			Call MyPrint("Process stopped!")
			Call MyPrint("----------------------------------------------------------------------")
			lResponse = Ask("Process stopped!" + Chr$(10) + Chr$(10) + Chr$(10) + "Show log file?", "Yes", "No")
			Goto Response
		End If
	End If

	'-------------------------------------------------
	' Process the selections one by one
	'-------------------------------------------------
	iExtractCnt = 1
	iMapLabelCounter = 1
	ProgressBar "Processing data search " + sSearchRef + " ..."
		Calling ProcessExtracts
		Range iExtractTot

	If CommandInfo(CMD_INFO_STATUS) = False Then
		Call MyPrint("")
		Call MyPrint("----------------------------------------------------------------------")
		Call MyPrint("Process interrupted by user!")
		Call MyPrint("----------------------------------------------------------------------")
		lResponse = Ask("Processing interrupted!" + Chr$(10) + Chr$(10) + Chr$(10) + "Show log file?", "Yes", "No")
		Goto Response
	End If

	'-------------------------------------------------
	' Export the combined sites table
	'-------------------------------------------------
	If bCreateCombinedSitesTable Then
		
		'-------------------------------------------------
		' Count the number of rows in the combined
		' sites table
		'-------------------------------------------------
		Dim iSitesTotal As Integer
		iSitesTotal = TableInfo(sCombinedSitesTable, TAB_INFO_NROWS)
	
		Dim sExportSitesName As String
		sExportSitesName = sSubRefNo + sCombinedSitesSuffix
	
		'-------------------------------------------------
		' Export the combined sites table as a DBF file
		'-------------------------------------------------
		If UCase$(sCombinedSitesFormat) = "DBF" Then
			Call MyPrint("Exporting combined sites table as a DBF file ...")
			Call MyPrint(iSitesTotal + " records found.")
			Export sCombinedSitesTable
				Into sLocalPath + "\" + sExportSitesName + ".dbf"
				Type "DBF"
				CharSet "WindowsLatin1"
				Overwrite
		End If
	
		'-------------------------------------------------
		' Export the combined sites table as a text file
		'-------------------------------------------------
		If UCase$(sCombinedSitesFormat) = "TXT" Then
			Call MyPrint("Exporting combined sites table as a TXT file ...")
			Export sCombinedSitesTable
				Into sLocalPath + "\" + sExportSitesName + ".txt"
				Type "ASCII"
				Delimiter ","
				CharSet "WindowsLatin1"
				Overwrite
		End If
		
		'-------------------------------------------------
		' Delete the combined sites table
		'-------------------------------------------------
		Call MyPrint("Dropping the combined sites table ...")
		Drop Table sCombinedSitesTable

	End If

	'-------------------------------------------------
	' Rename the local buffer table
	'-------------------------------------------------
	Call MyPrint("Renaming buffer table ...")
	Close Table sBufferTable

	Dim sLocalTable As String
	sLocalTable = "Buffer_" + sSubRefNo + "_" + sBufferSize + sBufferUnit

	sCmd = "Open Table " + Chr$(34) + sLocalPath + "\" + sLocalTable + ".tab" + Chr$(34) + " As " + sLocalTable
	Run Command (sCmd)

	'-------------------------------------------------
	' Add the local buffer table to all map windows and
	' zoom to the extent of the new buffered table
	'-------------------------------------------------
	For iWindowNum = 1 to iNumWindows

		'-------------------------------------------------
		' Add the local buffer table to the map window
		'-------------------------------------------------
		Add Map Window aWindowId(iWindowNum) Layer sLocalTable

		'-------------------------------------------------
		' Get the layer number of the buffer table (just added)
		'-------------------------------------------------
		Dim iNumTables As Integer
		iNumTables = MapperInfo(aWindowId(iWindowNum), MAPPER_INFO_LAYERS)
		Dim	iNumBufferTable as Integer
		For iNumBufferTable = 1 to iNumTables
			If LayerInfo(aWindowId(iWindowNum),iNumBufferTable, LAYER_INFO_NAME) = sLocalTable Then
				Exit For
			End If
		Next

		'-------------------------------------------------
		' Set the symbology for the local buffer table
		'-------------------------------------------------
		sCmd = "Set Map Window " + aWindowId(iWindowNum) + " Layer " + iNumBufferTable + " Display Global " + sBufferSymbology
		Run Command (sCmd)

		'-------------------------------------------------
		' Zoom to the local buffer table
		'-------------------------------------------------
		Set Map Window aWindowId(iWindowNum) Zoom Entire Layer iNumBufferTable

	Next

	Call MyPrint("")
	Call MyPrint("----------------------------------------------------------------------")
	Call MyPrint("Process completed!")
	Call MyPrint("----------------------------------------------------------------------")
	lResponse = Ask("Processing complete!" + Chr$(10) + Chr$(10) + Chr$(10) + "Show log file?", "Yes", "No")

Response:
	'-------------------------------------------------
	' Ask the user if they want to see the log file
	'-------------------------------------------------
	If lResponse = True Then
		'-------------------------------------------------
		' Open the Message window and clear it
		'-------------------------------------------------
		Close Window Message
		Open Window Message
		Set Window Message
			Position (7,4)
			Width 6
			Height 5
		Print(chr$(12))

		'-------------------------------------------------
		' Display the log file in the message window
		'-------------------------------------------------
		Call PrintLogFile

	End If

End Sub

Sub BufferSearch
'*************************************************
'* Routine to buffer the search area with the
'* required size and units.
'*************************************************

	Call MyPrint("Buffering search reference for " + sBufferSize + sBufferUnit + " ...")

	'-------------------------------------------------
	' Setup the temporary and buffer table names
	'-------------------------------------------------
	Dim sTempTable As String
	sTempTable = "Search_Area"
	
	Dim sLocalTable As String
	sLocalTable = "Buffer_" + sSubRefNo + "_" + sBufferSize + sBufferUnit
	sBufferTable = "Buffer_Area"

	'-------------------------------------------------
	' Find the layer number of the search table by
	' looking through all the windows until it is
	' found
	'-------------------------------------------------
	Dim iNumWindows As Integer
	iNumWindows = UBound(aWindowId)
	Dim iWindowNum As Integer
	For iWindowNum = 1 to iNumWindows
		Dim iNumTables As Integer
		Dim iNumSearchTable as Integer
		iNumTables = MapperInfo(aWindowId(iWindowNum), MAPPER_INFO_LAYERS)
		For iNumSearchTable = 1 to iNumTables
			If LayerInfo(aWindowId(iWindowNum),iNumSearchTable, LAYER_INFO_NAME) = sSearchTable Then
				Goto EditLayer
			End If
		Next
	Next

EditLayer:
	'-------------------------------------------------
	' Make the layer visible if it is not already
	'-------------------------------------------------
	If LayerInfo(aWindowId(iWindowNum),iNumSearchTable,LAYER_INFO_DISPLAY) = LAYER_INFO_DISPLAY_OFF Then
		Set Map Window aWindowId(iWindowNum) Layer iNumSearchTable Display Graphic
	End If
	
	'-------------------------------------------------
	' Make the layer editable if it is not already
	'-------------------------------------------------
	If LayerInfo(aWindowId(iWindowNum),iNumSearchTable,LAYER_INFO_EDITABLE) = False Then
		Set Map Window aWindowId(iWindowNum) Layer iNumSearchTable Editable On
	End If

	'-------------------------------------------------
	' Save the search area table (in case it has
	' unsaved edits
	'-------------------------------------------------
	If TableInfo(sSearchTable, TAB_INFO_EDITED) Then
		Call MyPrint("Saving table " + sSearchTable + " ...")
		Commit Table sSearchTable
	End If

	'-------------------------------------------------
	' Check if the old buffer table is
	' already/still open and close it if it is
	'-------------------------------------------------
	If TableIsOpen(sLocalTable) Then
		Call MyPrint("Closing buffer table ...")
		Close Table sLocalTable
	End If

	'-------------------------------------------------
	' Check if the temporary table is
	' already/still open and close it if it is
	'-------------------------------------------------
	If TableIsOpen(sTempTable) Then
		Call MyPrint("Closing temporary table ...")
		Close Table sTempTable
	End If

	'-------------------------------------------------
	' Select the required reference in the search table
	' and put it into the temporary table
	'-------------------------------------------------
	Call MyPrint("Selecting reference feature(s) ...")
	Dim sCmd as String
	sCmd = "Select * from " + sSearchTable + " Where " + sSearchColumn + " = " + Chr$(34) + sSearchRef + Chr$(34) + " Into " + sTempTable
	Run Command (sCmd)

	'-------------------------------------------------
	' Count the number of objects that have
	' been selected in the temporary table
	'-------------------------------------------------
	Dim iRecTotal As Integer
	iRecTotal = TableInfo(sTempTable, TAB_INFO_NROWS)

	'-------------------------------------------------
	' Check if any records were selected
	'-------------------------------------------------
	If iRecTotal = 0 Then
		Call MyPrint("Reference '" + sSearchRef + "' not found in '" + sSearchTable + "' table.")
		Note "Error: Reference '" + sSearchRef + "' not found in '" + sSearchTable + "' table."
		sBufferTable = ""
		Exit Sub
	End If

	'-------------------------------------------------
	' Buffer the selected search reference (in the
	' temporary table)
	'-------------------------------------------------
	Call MyPrint("Buffering the search reference ...")
	sCmd = "Create Object As Buffer From " + sTempTable + " Width " + sBufferSize + " Units " + Chr$(34) + sBufferUnit + Chr$(34) + " Type Spherical Resolution 100 Into Table " + sSearchTable + " Data " + sAggregateColumns + ",radius=" + Chr$(34) + sBufferSize + sBufferUnit + Chr$(34)
	Run Command (sCmd)

	'-------------------------------------------------
	' Close the temporary table
	'-------------------------------------------------
	Call MyPrint("Closing temporary table ...")
	Close Table sTempTable

	'-------------------------------------------------
	' Check if the buffer table is
	' already/still open and close it if it is
	'-------------------------------------------------
	If TableIsOpen(sBufferTable) Then
		Call MyPrint("Closing buffer table ...")
		Close Table sBufferTable
	End If

	'-------------------------------------------------
	' Save the buffer table
	'-------------------------------------------------
	Call MyPrint("Saving buffer table ...")
	sCmd = "Commit Table Selection As " + Chr$(34) + sLocalPath + "\" + sLocalTable + ".tab" + Chr$(34) + " TYPE NATIVE Charset " + Chr$(34) + "WindowsLatin1" + Chr$(34)
	Run Command (sCmd)

	'-------------------------------------------------
	' Close the selection table
	'-------------------------------------------------
	Close Table Selection

	'-------------------------------------------------
	' Close the latest query table
	'-------------------------------------------------
	Dim t As SmallInt
	For t = NumTables() to 1 Step -1
		If TableInfo(t, TAB_INFO_TEMP) Then
			Close Table TableInfo(t, TAB_INFO_NAME)
			Exit For
		End If
	Next

	'-------------------------------------------------
	' Open the new buffered table
	'-------------------------------------------------
	Call MyPrint("Opening buffer table ...")
	sCmd = "Open Table " + Chr$(34) + sLocalPath + "\" + sLocalTable + ".tab" + Chr$(34) + " As " + sBufferTable
	Run Command (sCmd)

	'-------------------------------------------------
	' Undo the updates to the search table to remove the temporary buffered object
	'-------------------------------------------------
	Rollback Table sSearchTable

	'-------------------------------------------------
	' Make the layer non-editable
	'-------------------------------------------------
	Set Map Window aWindowId(iWindowNum) Layer iNumSearchTable Editable Off

	Call MyPrint("Buffering complete.")
	Call MyPrint("")

End Sub

Sub CreateCombinedSitesTable
	
'*************************************************
'* Routine to create a combined sites table.
'*************************************************

	Call MyPrint("Creating combined sites table ...")

	'-------------------------------------------------
	' Setup the local table name
	'-------------------------------------------------
	sCombinedSitesTable = "Combined_Sites"

	'-------------------------------------------------
	' Check if an old combined sites table is
	' already/still open and close it if it is
	'-------------------------------------------------
	If TableIsOpen(sCombinedSitesTable) Then
		Call MyPrint("Closing combined sites table ...")
		Close Table sCombinedSitesTable
	End If

	'-------------------------------------------------
	' Check if the combined sites table is
	' already/still open and close it if it is
	'-------------------------------------------------
	If TableIsOpen(sCombinedSitesTable) Then
		Call MyPrint("Closing combined sites table ...")
		Close Table sCombinedSitesTable
	End If

	Dim sCmd As String
	sCmd = "Create Table " + Chr$(34) + sCombinedSitesTable + Chr$(34) + " (" + sCombinedSitesColumns + ") file " + Chr$(34) + sLocalPath + "\" + sCombinedSitesTable + ".tab" + Chr$(34) + " TYPE NATIVE Charset " + Chr$(34) + "WindowsLatin1" + Chr$(34)
	Run Command (sCmd)

	Call MyPrint("Creation complete.")
	Call MyPrint("")

End Sub

Sub ProcessExtracts
'***************************************************************
'* Process each combination of table and partner
'***************************************************************

	Dim sMapTable As String, sMapName As String, sMapSuffix As String
	Dim sMapColumns As String, sMapCriteria As String, sMapKeyColumn As String
	Dim sMapFormat As String, sMapKeep As String, sMapLabelClause As String
	Dim sMapLabelColumn As String
	Dim sMapSiteColumns As String, sMapSiteCriteria As String
	
	sMapTable = aMapTableSelected(iExtractCnt)
	sMapName = aMapNameSelected(iExtractCnt)
	sMapSuffix = aMapSuffixSelected(iExtractCnt)
	sMapColumns = aMapColumnsSelected(iExtractCnt)
	sMapCriteria = aMapCriteriaSelected(iExtractCnt)
	sMapKeyColumn = aMapKeyColumnSelected(iExtractCnt)
	sMapFormat = aMapFormatSelected(iExtractCnt)
	sMapKeep = aMapKeepSelected(iExtractCnt)
	sMapLabelColumn = aMapLabelColumnSelected(iExtractCnt)
	sMapLabelClause = aMapLabelClauseSelected(iExtractCnt)
	sMapSiteColumns = aMapSiteColumnsSelected(iExtractCnt)
	sMapSiteCriteria = aMapSiteCriteriaSelected(iExtractCnt)

	Call MyPrint("Processing table = '" + sMapTable + "' (" + iExtractCnt + " of " + iExtractTot + ") ...")

	'-------------------------------------------------
	' Call the subroutine to select the records from
	' the selected table
	'-------------------------------------------------
	Call SelectMaps(sMapTable, sMapName, sMapSuffix, sMapColumns, sMapCriteria,
		sMapKeyColumn, sMapFormat, sMapKeep, sMapLabelColumn, sMapLabelClause,
		sMapSiteColumns, sMapSiteCriteria)

	Call MyPrint("Completed table = '" + sMapTable + "'.")
	Call MyPrint("")

	'-------------------------------------------------
	' Increment the progress bar to show progress
	'-------------------------------------------------
	ProgressBar = iExtractCnt

	'-------------------------------------------------
	' Go to the next selection in the list
	'-------------------------------------------------
	iExtractCnt = iExtractCnt + 1
	If iExtractCnt > iExtractTot Then
		'-------------------------------------------------
		' Halt processing
		'-------------------------------------------------
		ProgressBar = -1
	End If

End Sub

Sub SelectMaps(sMapTable As String,
	sMapName As String,
	sMapSuffix As String,
	sMapColumns As String,
	sMapCriteria As String,
	sMapKeyColumn As String,
	sMapFormat As String,
	sMapKeep As String,
	sMapLabelColumn As String,
	sMapLabelClause As String,
	sMapSiteColumns As String,
	sMapSiteCriteria As String)
'*************************************************
'* Routine to select the records from the
'* MapInfo table name passed in the call that
'* intersect with the boundary passed in the call.
'*************************************************

	OnError Goto ErrorTrap

	'-------------------------------------------------
	' Setup the local table name and temp name
	'-------------------------------------------------
	Dim sLocalName As String, sExportName As String, sTempName As String
	sLocalName = sMapName + "_" + sSubRefNo
	sExportName = sSubRefNo + sMapSuffix
	sTempName = "X" + sMapSuffix

	'-------------------------------------------------
	' Check if the local table is already/still open
	' and close it if it is
	'-------------------------------------------------
	If TableIsOpen(sLocalName) Then
		Call MyPrint("Closing local table ...")
		Close Table sLocalName
	End If

	If TableIsOpen(sExportName) Then
		Call MyPrint("Closing export table ...")
		Close Table sExportName
	End If

	'-------------------------------------------------
	' Execute the SQL statement to select the table
	' records intersecting with the required
	' partner boundary
	'-------------------------------------------------
	Call MyPrint("Executing spatial selection ...")
	Dim sCmd as String
	sCmd = "Select * From " + sMapName + " Where obj Intersects Any (Select Obj From " + sBufferTable + ") Order By " + sMapKeyColumn + " Into " + sLocalName
	Run Command (sCmd)

	'-------------------------------------------------
	' Count the number of records that have
	' been selected
	'-------------------------------------------------
	Dim iRecTotal As Integer
	iRecTotal = TableInfo(sLocalName, TAB_INFO_NROWS)

	'-------------------------------------------------
	' Check if the maximum number of records will be
	' exceeded
	'-------------------------------------------------
	If iRecTotal > iRecMax Then
		Call MyPrint("Record count exceeds maximum of " + iRecMax + " - table skipped.")
		Close Table sLocalName
		Exit Sub
	End If

	'-------------------------------------------------
	' Check if any records were extracted
	'-------------------------------------------------
	If iRecTotal = 0 Then
		Call MyPrint("No records found - table skipped.")
		Close Table sLocalName
		Exit Sub
	End If

	Call MyPrint("" + iRecTotal + " records selected.")

	'-------------------------------------------------
	' Save the local table
	'-------------------------------------------------
	Call MyPrint("Saving local table ...")
	sCmd = "Commit Table " + sLocalName + " As " + Chr$(34) + sLocalPath + "\" + sLocalName + ".tab" + Chr$(34) + " TYPE NATIVE Charset " + Chr$(34) + "WindowsLatin1" + Chr$(34)
	Run Command (sCmd)

	'-------------------------------------------------
	' Close the selection table
	'-------------------------------------------------
	Close Table Selection

	'-------------------------------------------------
	' Close the local table and re-open it (as it seems
	' to get locked somehow and won't drop)
	'-------------------------------------------------
	Close Table sLocalName
	sCmd = "Open Table " + Chr$(34) + sLocalPath + "\" + sLocalName + ".tab" + Chr$(34) + " As " + sLocalName
	Run Command (sCmd)

	'-------------------------------------------------
	' If the table doesn't already contain the
	' map label column
	'-------------------------------------------------
	If ColumnExists(sLocalName, sMapLabelColumn) = False Then

		'-------------------------------------------------
		' If the map label column is needed for the
		' combined sites table, or the export file, or
		' it is to be overwritten
		'-------------------------------------------------
		If (bCreateCombinedSitesTable And Instr(1, sMapSiteColumns, sMapLabelColumn) = 0)
		Or Instr(1, sMapColumns, sMapLabelColumn) = 0
		Or iOverwriteLabels > 1 Then
			
			'-------------------------------------------------
			' Add the column to the combined sites table
			'-------------------------------------------------
			Call MyPrint("Adding column " + sMapLabelColumn + "...")
			sCmd = "Alter Table " + sLocalName + " ( Add " + sMapLabelColumn + " Char(10) )"
			Run Command (sCmd)
		
		End If

	End If

	'-------------------------------------------------
	' If the map labels are to be overwritten
	'-------------------------------------------------
	If iOverwriteLabels > 1 Then

		'-------------------------------------------------
		' Reset the map label counter if a running total
		' is not required for a combined sites table
		'-------------------------------------------------
		If iOverwriteLabels = 2 Then
			iMapLabelCounter = 1
		End If

		'-------------------------------------------------
		' Overwrite the map labels (adding the map
		' label column if required)
		'-------------------------------------------------
		Call OverwriteMapLabels(sLocalName, sMapKeyColumn, sMapLabelColumn)

	End If

	'-------------------------------------------------
	' If a combined sites table is required, and
	' there are columns from this table to add,
	' then add the column details
	'-------------------------------------------------
	If bCreateCombinedSitesTable
	And sMapSiteColumns <> "" Then

		'-------------------------------------------------
		' Add the site details to the combined sites
		' table
		'-------------------------------------------------
		Call AddToCombinedSitesTable(sLocalName, sMapSiteColumns, sMapSiteCriteria)
		
	End If

	'-------------------------------------------------
	' Execute the SQL statement to select only the
	' table columns required for the export
	'-------------------------------------------------
	Call MyPrint("Executing selection for export ...")
	sCmd = "Select " + sMapColumns + " From " + sLocalName + " " + sMapCriteria + " Into " + sTempName
	Run Command (sCmd)

	'-------------------------------------------------
	' Export the table as a DBF file
	'-------------------------------------------------
	If UCase$(sMapFormat) = "DBF" Then
		Call MyPrint("Exporting as a DBF file ...")
		Export sTempName
			Into sLocalPath + "\" + sExportName + ".dbf"
			Type "DBF"
			CharSet "WindowsLatin1"
			Overwrite
	End If

	'-------------------------------------------------
	' Export the table as a text file
	'-------------------------------------------------
	If UCase$(sMapFormat) = "TXT" Then
		Call MyPrint("Exporting as a TXT file ...")
		Export sTempName
			Into sLocalPath + "\" + sExportName + ".txt"
			Type "ASCII"
			Delimiter ","
			CharSet "WindowsLatin1"
			Overwrite
	End If

	'-------------------------------------------------
	' Close the temporary table
	'-------------------------------------------------
	If TableIsOpen(sTempName) Then
		Close Table sTempName
	End If
	
	'-------------------------------------------------
	' Add the local table to the map if required
	'-------------------------------------------------
	If iAddSelectedTables > 1 And UCase$(sMapKeep) = "YES" Then
		
		'-------------------------------------------------
		' Add the local table to the current active window
		'-------------------------------------------------
		Dim iWindowId As Integer
		iWindowId = FrontWindow()

		If iWindowId > 0 Then
			'-------------------------------------------------
			' Add the local table to the map window
			'-------------------------------------------------
			Call MyPrint("Adding layer to map ...")
			Add Map Window iWindowId Layer sLocalName

			If iAddSelectedTables = 3 Then

				'-------------------------------------------------
				' Display the labels for the layer
				'-------------------------------------------------
				Call MyPrint("Settings labels to layer ...")
				sCmd = "Set Map Window " + iWindowId + " Layer " + sLocalName + " Label " + sMapLabelClause
				Run Command (sCmd)

			End If
	
		End If
		
	Else

		'-------------------------------------------------
		' Delete the local table as not required
		'-------------------------------------------------
		Call MyPrint("Dropping the MapInfo table ...")
		Drop Table sLocalName

	End If

	Exit Sub

ErrorTrap:
	Note "Error: " + str$(Err()) + ": " + Error$()
	Call MyPrint(str$(Err()) + ": " + Error$())
	Exit Sub

End Sub

Sub OverwriteMapLabels
	(sTableName As String,
	sKeyColumn As String,
	sLabelColumn As String)
'***************************************************************
'* Overwrite the map label column with an incremental
'* number starting from the counter
'***************************************************************

	Dim sCmd as String

	Set ProgressBars Off

	'-------------------------------------------------
	' Select the map label column so that it can
	' be updated
	'-------------------------------------------------
	sCmd = "Select * From " + sTableName + " Into MapLabels NoSelect"
	Run Command (sCmd)

	'-------------------------------------------------
	' Count the number of rows selected
	'-------------------------------------------------
	Dim iRows As Integer
	iRows = TableInfo(MapLabels, TAB_INFO_NROWS)

	Call MyPrint("Setting map labels for " + FormatNumber$(iRows) + " rows ...")

	'-------------------------------------------------
	' If any rows were selected then set the object
	'-------------------------------------------------
	If iRows > 0 Then

		'-------------------------------------------------
		' Set the key column alias
		'-------------------------------------------------
		Dim nKeyCol As Alias
		nKeyCol = sTableName + "." + sKeyColumn

		'-------------------------------------------------
		' Fetch the first of the selected rows
		'-------------------------------------------------
		Fetch First from MapLabels

		'-------------------------------------------------
		' Loop through all the selected rows setting the
		' map label
		'-------------------------------------------------
		Dim iRow as Integer
		iRow = 1
		
		Dim sKeyValue As String
		Do while iRow <= iRows

			'-------------------------------------------------
			' Get the row key value
			'-------------------------------------------------
			sKeyValue = nKeyCol

			'-------------------------------------------------
			' Update the row in the table
			'-------------------------------------------------
			sCmd = "Update MapLabels Set " + sLabelColumn + " = " + iMapLabelCounter + " Where RowID = " + iRow
			Run Command (sCmd)

			'-------------------------------------------------
			' Fetch the next of the selected rows
			'-------------------------------------------------
			Fetch next from MapLabels
			
			iRow = iRow + 1

			'-------------------------------------------------
			' Increment the label counter if the row
			' key value has changed
			'-------------------------------------------------
			If sKeyValue <> nKeyCol Then
				iMapLabelCounter = iMapLabelCounter + 1
			End If

		Loop

		'-------------------------------------------------
		' Save the updates
		'-------------------------------------------------
		sCmd = "Commit Table MapLabels"
		Run Command (sCmd)

	End If

CleanUp:

	Set ProgressBars On

	'-------------------------------------------------
	' Close the temporary MapLabels table if it is
	' already/still open in the current MapInfo session
	'-------------------------------------------------
	If TableIsOpen("MapLabels") Then
		Close Table MapLabels
	End If

	'-------------------------------------------------
	' Close the the Selection table if it is
	' already/still open in the current MapInfo session
	'-------------------------------------------------
	If TableIsOpen("Selection") Then
		Close Table Selection
	End If

	'-------------------------------------------------
	' Unselect all records
	'-------------------------------------------------
	Run Menu command M_QUERY_UNSELECT

End Sub

Sub AddToCombinedSitesTable
	(sTableName As String,
	sSitesColumns As String,
	sSitesCriteria As String)
'***************************************************************
'***************************************************************

	Dim sCmd as String

	Set ProgressBars Off

	'-------------------------------------------------
	' Select the site details to be added to the
	' combined sites table
	'-------------------------------------------------
	sCmd = "Select " + sSitesColumns + " From " + sTableName + " " + sSitesCriteria + " Into TempSites NoSelect"
	Run Command (sCmd)

	'-------------------------------------------------
	' Insert the rows into the combined sites table
	'-------------------------------------------------
	sCmd = "Insert into " + sCombinedSitesTable + " Select * From TempSites"
	Run Command (sCmd)

	'-------------------------------------------------
	' Save the updates
	'-------------------------------------------------
	sCmd = "Commit Table " + sCombinedSitesTable
	Run Command (sCmd)

CleanUp:

	Set ProgressBars On

	'-------------------------------------------------
	' Close the temporary sites table if it is
	' already/still open in the current MapInfo session
	'-------------------------------------------------
	If TableIsOpen("TempSites") Then
		Close Table TempSites
	End If

	'-------------------------------------------------
	' Close the the Selection table if it is
	' already/still open in the current MapInfo session
	'-------------------------------------------------
	If TableIsOpen("Selection") Then
		Close Table Selection
	End If

	'-------------------------------------------------
	' Unselect all records
	'-------------------------------------------------
	Run Menu command M_QUERY_UNSELECT

End Sub

Sub AboutBox
'***************************************************************
'* Display the 'About' dialog box
'***************************************************************

	Dialog
		Title "About Data Searches 1.40"
		Width 230
		Height 115

	Control StaticText
		Title "This program will extract all required GIS layers that"
		Position 10,10
	Control StaticText
		Title "intersect with a given feature with a specified buffer."
		Position 10,20
	Control StaticText
		Title "The user can select which layers to extract from, the"
		Position 10,30
	Control StaticText
		Title "data search feature to select and the buffer to apply."
		Position 10,40
	Control StaticText
		Title "Created by Andy Foy Consulting."
		Position 10,60
	Control StaticText
		Title "Copyright© 2012-2013 GiGL, 2015 TVERC."
		Position 10,70
	Control OKButton
		Position 185,95

End Sub

Sub MyPrint(ByVal sMsg As String)
'***************************************************************
'* Bespoke print function
'***************************************************************

	'-------------------------------------------------
	' Open the log file for output
	'-------------------------------------------------
	Open File sLogFile For Append As #1

	'-------------------------------------------------
	' Write the message passed to the output file
	'-------------------------------------------------
	Print #1, FormatDate$(CurDate()) + " " + FormatTime$(CurTime(),"H:mm:ss") + " : " + sMsg

	'-------------------------------------------------
	' Close the output file
	'-------------------------------------------------
	Close File #1

End Sub

Sub PrintLogFile()
'***************************************************************
'* Print the log file to the message window
'***************************************************************

	'-------------------------------------------------
	' Open the log file for input
	'-------------------------------------------------
	Open File sLogFile For Input As #99

	'-------------------------------------------------
	' Get the first line
	'-------------------------------------------------
	Dim sMsg As String
	Line Input #99, sMsg

	'-------------------------------------------------
	' Loop through all the lines until the log file
	' is empty
	'-------------------------------------------------
	Do Until EOF(99)
		'-------------------------------------------------
		' Print the log file line to the message window
		'-------------------------------------------------
		Print sMsg

		'-------------------------------------------------
		' Get the first line
		'-------------------------------------------------
		Line Input #99, sMsg
	Loop

	'-------------------------------------------------
	' Refresh the message window
	'-------------------------------------------------
	Update Window WIN_MESSAGE

	'-------------------------------------------------
	' Close the log file
	'-------------------------------------------------
	Close File #99

End Sub

Sub egsit
'***************************************************************
'* Exit the program
'***************************************************************

	End Program

End Sub