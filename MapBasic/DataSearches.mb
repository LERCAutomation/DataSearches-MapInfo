'* DataSearches is a MapInfo tool to lists all the available MapInfo
'* habitat, species and other layers and allows the user to select
'* which layers to extract for the current data search.
'*
'* Copyright © 2013 GiGL
'* Copyright © 2015 - 2016 TVERC, GiGL
'* 
'* This file is part of the MapInfo tool 'DataSearches'.
'* 
'* DataSearches is free software: you can redistribute it and/or modify
'* it under the terms of the GNU General Public License as published by
'* the Free Software Foundation, either version 3 of the License, or
'* (at your option) any later version.
'* 
'* DataSearches is distributed in the hope that it will be useful,
'* but WITHOUT ANY WARRANTY; without even the implied warranty of
'* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'* GNU General Public License for more details.
'* 
'* You should have received a copy of the GNU General Public License
'* along with DataSearches.  If not, see <http://www.gnu.org/licenses/>.
'*
'***************************************************************
'* DataSearches v1.4.16
'*
'* Creates a dialog window which lists all the available MapInfo
'* habitat, species and other layers and allows the user to select
'* which layers to extract for the current data search.
'*
'*
'* Created:			Andy Foy - February 2013
'* Last revised:	Andy Foy - November 2016
'*
'* *****************  Version 1.4.16  **************
'* Author: Andy Foy		Date: 15/11/2016
'* A. Fix subscript out of range bug with group layer.
'*
'* *****************  Version 1.4.15  **************
'* Author: Andy Foy		Date: 02/11/2016
'* A. Fix bug when group layer not added to window.
'*
'* *****************  Version 1.4.14  **************
'* Author: Andy Foy		Date: 01/11/2016
'* A. Use cosmetic layer to create search area buffer
'*    instead of search layer.
'*
'* *****************  Version 1.4.13  **************
'* Author: Andy Foy		Date: 24/10/2016
'* A. Pre-select layers if specified on layer in XML.
'* B. Reset label numbers to 1 if specified on layer
'*    in XML.
'* C. Hide search layer before searching.
'* D. Enable option to supress warning for layers
'*    missing on tool load.
'*
'* *****************  Version 1.4.12  **************
'* Author: Andy Foy		Date: 20/10/2016
'* A. Fix bug when buffer size contains decimals.
'*
'* *****************  Version 1.4.11  **************
'* Author: Andy Foy		Date: 16/08/2016
'* A. Remove need for 'Where' in select criteria.
'* B. Group layers when adding to map windows.
'* C. Enable overlap area to be included in export
'*    files.
'* D. Enable overlap area to be included in the
'*    combined sites table.
'* E. Save search feature(s) as local layer and apply
'*    symbology.
'*
'* *****************  Version 1.4.10  **************
'* Author: Andy Foy		Date: 14/08/2016
'* A. Check the search sites table is open.
'*
'* *****************  Version 1.4.9  ***************
'* Author: Andy Foy		Date: 14/07/2016
'* A. Enable separate instances for tool to run under
'*    different names in Tool menu.
'*
'* *****************  Version 1.4.8  ****************
'* Author: Andy Foy		Date: 27/06/2016
'* A. Enable search radius to be included in export
'*    files.
'* B. Enable search radius to be included in the
'*    combined sites table.
'* C. Enable combined sites table to be appended to
'*    or over-written as required.
'*
'* *****************  Version 1.4.7  ****************
'* Author: Andy Foy		Date: 30/05/2016
'* A. Convert underscores to spaces when displaying
'*    node names.
'* B. Add XML attribute for saved GIS layer prefixes.
'* C. Change version number to 3 parts.
'*
'* *****************  Version 1.46  *****************
'* Author: Andy Foy		Date: 05/05/2016
'* A. Include column titles in CSV export files.
'*
'* *****************  Version 1.45  *****************
'* Author: Andy Foy		Date: 11/04/2016
'* A. Add button to lookup Site Name from database
'*    using search reference.
'* B. Hide controls if default value is blank.
'*
'* *****************  Version 1.44  *****************
'* Author: Andy Foy		Date: 24/03/2016
'* A. Split SQL criteria into separate selection and
'*    export criteria.
'* B. Logging separate record counts for selection
'*    and export.
'* C. Delete layers no kept for map display.
'*
'* *****************  Version 1.43  *****************
'* Author: Andy Foy		Date: 14/03/2016
'* A. Enable export of tables in either CSV, DBF or TXT
'*    format.
'* 
'* *****************  Version 1.42  *****************
'* Author: Andy Foy		Date: 09/03/2016
'* A. Ask user if they want to keep the dialog open.
'* B. Open log file using Notepad.exe.
'*
'* *****************  Version 1.41  *****************
'* Author: Andy Foy		Date: 17/01/2016
'* A. Count list of tables not already open in MapInfo.
'*
'* *****************  Version 1.40  *****************
'* Author: Andy Foy		Date: 19/10/2015
'* A. Added lookup of site name from access database, or input
'*    by user.
'* B. Changed buffer units to a popup menu.
'* C. Enable selected tables to be kept and added to the
'*    active map window (with/without labels)
'* D. Enable map labels to be overwritten with sequential
'*    number either within each table or across all tables.
'* E. Optionally create a combined sites table containing
'*    details of all selected sites within search area.
'* F. Enable variables to be used within some file paths
'*    and file name variables in the XML file.
'* G. Set the buffer search area symbology from an XML
'*    variable.
'*
'***************************************************************
Include "DataSearches.def"

Sub Main
'***************************************************************
'* Main sub-routine
'***************************************************************

	'-------------------------------------------------
	' Set the version number
	'-------------------------------------------------
	sVersion = "1.4.16"

	'-------------------------------------------------
	' Get the title for the Tool menu
	'-------------------------------------------------
	Call GetToolTitle

	'-------------------------------------------------
	' Create a new menu
	'-------------------------------------------------
	Create Menu "&" & sToolTitle As
	   "&Run " & sToolTitle & " ..." Calling OpenDialog,
	   "(-",
	   "&About " & sToolTitle & " ..." Calling AboutBox,
	   "E&xit " & sToolTitle Calling egsit

	'-------------------------------------------------
	' Add the new menu item to the Tools menu
	'-------------------------------------------------
	Alter Menu "Tools" Add
		sToolTitle As sToolTitle

	Exit Sub

End Sub

Sub GetToolTitle
'***************************************************************
'* Retrieve the tool title to use from the config file
'* which is a XML document
'***************************************************************

	Dim bParseError As SmallInt
	Dim hXMLDoc As MIXmlDocument
	Dim hXMLRoot As MIXmlNode
	Dim hXMLNode As MIXmlNode

	OnError Goto GetTitleError

	' Set the default Tool menu title
	sToolTitle = "Data Searches"

	'-------------------------------------------------
	' Create a document handle
	'-------------------------------------------------
	hXMLDoc = MIXmlDocumentCreate()
	If hXMLDoc Then

		'-------------------------------------------------
		' Load the document into the document handle
		'-------------------------------------------------
		Dim iXMLLoad As SmallInt
		iXMLLoad = MIXmlDocumentLoad(hXMLDoc, ApplicationDirectory$() + "DataSearches.xml", bParseError, FALSE, FALSE)
		if iXMLLoad > 0 Then

			'-------------------------------------------------
			' Get a handle on the XML root node of the document
			'-------------------------------------------------
			hXMLRoot = MIXmlDocumentGetRootNode(hXMLDoc)
			If hXMLRoot Then

				'-------------------------------------------------
				' Get a handle on the DataSearches node
				'-------------------------------------------------
				hXMLNode = MIXmlSelectSingleNode(hXMLRoot, "DataSearches")
	          	If hXMLNode Then
	
					'-------------------------------------------------
					' Load the default values from the child nodes
					' under the DataSearches node
					'-------------------------------------------------
					' Title for adding the program to the Tool menu
					Dim sTitle As String
					sTitle = GetSingleNodeValue(hXMLNode, "ToolTitle")
					If sTitle <> "" Then
						sToolTitle = sTitle
					End If

				End If

			End If

		Else

			Goto GetTitleError

		End If

	End If

CleanUp:
	'-------------------------------------------------
	' Destroy the handles
	'-------------------------------------------------
	If hXMLNode Then Call MIXmlNodeDestroy(hXMLNode) End If
	If hXMLRoot Then Call MIXmlNodeDestroy(hXMLRoot) End If
	If hXMLDoc Then Call MIXmlDocumentDestroy(hXMLDoc) End If

	Exit Sub

GetTitleError:
	Note "Unable to get tool title from XML config file.  Using default title 'Data Searches'."
	Exit Sub

End Sub

Sub GetDefaultValues
'***************************************************************
'* Retrieve all the default values from the config file
'* which is a XML document
'***************************************************************

	Dim bParseError As SmallInt
	Dim hXMLDoc As MIXmlDocument
	Dim hXMLRoot As MIXmlNode
	Dim hXMLNode As MIXmlNode
	Dim hXMLSubNode As MIXmlNode
	Dim hXMLFilesNodeParent As MIXmlNode
	Dim hXMLFilesNodeList As MIXMLNodeList
	Dim hXMLFilesNode As MIXmlNode

	'-------------------------------------------------
	' Trap errors
	'-------------------------------------------------
	OnError Goto GetDefaultsError

	'-------------------------------------------------
	' Create a document handle
	'-------------------------------------------------
	hXMLDoc = MIXmlDocumentCreate()
	If hXMLDoc Then

		'-------------------------------------------------
		' Load the document into the document handle
		'-------------------------------------------------
		Dim iXMLLoad As SmallInt
		iXMLLoad = MIXmlDocumentLoad(hXMLDoc, ApplicationDirectory$() + "DataSearches.xml", bParseError, FALSE, FALSE)
		if iXMLLoad > 0 Then

			'-------------------------------------------------
			' Get a handle on the XML root node of the document
			'-------------------------------------------------
			hXMLRoot = MIXmlDocumentGetRootNode(hXMLDoc)
			If hXMLRoot Then

				'-------------------------------------------------
				' Get a handle on the DataSearches node
				'-------------------------------------------------
				hXMLNode = MIXmlSelectSingleNode(hXMLRoot, "DataSearches")
				If hXMLNode Then
	
					'-------------------------------------------------
					' Load the default values from the child nodes
					' under the DataSearches node
					'-------------------------------------------------
					' The database where all the data search details are stored
					sDatabase = GetSingleNodeValue(hXMLNode, "Database")

					' The file location where the enquiries table will be stored
					sEnquiriesDir = GetSingleNodeValue(hXMLNode, "EnquiriesDir")

					' The field name of the search reference unique value
					sRefColumn = GetSingleNodeValue(hXMLNode, "RefColumn")

					' The field name of the search reference site name
					sSiteColumn = GetSingleNodeValue(hXMLNode, "SiteColumn")

					' The character(s) used to replace any special characters in folder names
					sRepChar = GetSingleNodeValue(hXMLNode, "RepChar")

					' The file location where all data search folders are stored
					sSaveRootDir = GetSingleNodeValue(hXMLNode, "SaveRootDir")

					' The folder where the report will be saved
					sSaveFolder = GetSingleNodeValue(hXMLNode, "SaveFolder")

					' Sub-folder where all the extract files will be stored
					sGISFolder = GetSingleNodeValue(hXMLNode, "GISFolder")

					' Log file name prefix for storing output messages
					sLogFileName = GetSingleNodeValue(hXMLNode, "LogFileName")

					' Default size to use for the buffer
					sDefaultBufferSize = GetSingleNodeValue(hXMLNode, "DefaultBufferSize")

					' Default unit to use for the buffer
					iDefaultBufferUnit = GetSingleNodeValue(hXMLNode, "DefaultBufferUnit")

					' Options for the buffer units
					sBufferUnitOptions = GetSingleNodeValue(hXMLNode, "BufferUnitOptions")

					' Symbology for the buffer features
					sBufferSymbology = GetSingleNodeValue(hXMLNode, "BufferSymbology")

					' Coordinate system to be used for mapping
					sCoordSys = GetSingleNodeValue(hXMLNode, "CoordinateSystem")

					' Symbology for the search area features
					sSearchAreaSymbology = GetSingleNodeValue(hXMLNode, "SearchAreaSymbology")

					' Maximum number of records to be downloaded at one time
					iRecMax = GetSingleNodeValue(hXMLNode, "RecMax")

					' Name of the table containing the search sites
					sSearchTable = GetSingleNodeValue(hXMLNode, "SearchTable")

					' Name of the column in the search table used to store the search reference
					sSearchColumn = GetSingleNodeValue(hXMLNode, "SearchColumn")

					' Column values used when buffering the search area in the search table
					sAggregateColumns = GetSingleNodeValue(hXMLNode, "AggregateColumns")

					' Options for adding the selected tables to the map window
					sAddSelectedTablesOptions = GetSingleNodeValue(hXMLNode, "AddSelectedTablesOptions")

					' Default option for adding selected tables to the map window
					Dim sDefaultAddSelectedTables As String
					sDefaultAddSelectedTables = GetSingleNodeValue(hXMLNode, "DefaultAddSelectedTables")
					If sDefaultAddSelectedTables = "" Then
						iDefaultAddSelectedTables = 0
					Else
						iDefaultAddSelectedTables = sDefaultAddSelectedTables
					End If

					' Options for overwritting the map labels
					sOverwriteLabelOptions = GetSingleNodeValue(hXMLNode, "OverwriteLabelOptions")

					' Whether any map label columns should be overwritten
					Dim sDefaultOverwriteLabels As String
					sDefaultOverwriteLabels = GetSingleNodeValue(hXMLNode, "DefaultOverwriteLabels")
					If sDefaultOverwriteLabels = "" Then
						iDefaultOverwriteLabels = 0
					Else
						iDefaultOverwriteLabels = sDefaultOverwriteLabels
					End If

					' Options for creating the combined sites table
					sCombinedSitesOptions = GetSingleNodeValue(hXMLNode, "CombinedSitesOptions")

					' Whether a combined sites table should be created
					Dim sDefaultCombinedSitesTable As String
					sDefaultCombinedSitesTable = GetSingleNodeValue(hXMLNode, "DefaultCombinedSitesTable")
					If sDefaultCombinedSitesTable = "" Then
						iDefaultCombinedSitesTable = 0
					Else
						iDefaultCombinedSitesTable = sDefaultCombinedSitesTable
					End If

					'-------------------------------------------------
					' Get a handle on the Combined Sites table sub-node
					'-------------------------------------------------
					hXMLSubNode = MIXmlSelectSingleNode(hXMLNode, "CombinedSitesTable")
					If hXMLSubNode Then
		
						' Table name of the combined sites table
						sCombinedSitesTable = GetSingleNodeValue(hXMLSubNode, "TableName")
						
						' Columns of the combined sites table
						sCombinedSitesColumns = GetSingleNodeValue(hXMLSubNode, "Columns")
						
						' Suffix of the combined sites table
						sCombinedSitesSuffix = GetSingleNodeValue(hXMLSubNode, "Suffix")
						
						' Format of the combined sites table
						sCombinedSitesFormat = GetSingleNodeValue(hXMLSubNode, "Format")
						
					End If

					'-------------------------------------------------
					' Get a handle on the MapTables node
					'-------------------------------------------------
					hXMLFilesNodeParent = MIXmlSelectSingleNode(hXMLNode, "MapTables")

					'-------------------------------------------------
					' Get a handle on the node map of the above node
					'-------------------------------------------------
					hXMLFilesNodeList = MIXMLGetChildList(hXMLFilesNodeParent)

					'-------------------------------------------------
					' Get a handle on the first attribute in the node map
					'-------------------------------------------------
					hXMLFilesNode = MIXMLGetNextNode(hXMLFilesNodeList)

					'-------------------------------------------------
					' Trap errors
					'-------------------------------------------------
					OnError Goto GetVariablesError

					'-------------------------------------------------
					' Loop through all the attributes in the node map
					' storing the names and statements in arrays
					'-------------------------------------------------
					Dim i As Integer
					i = 0
					Redim AllMaps(99)
					Do while hXMLFilesNode
						
						i = i + 1

						' Name of the Map node
						AllMaps(i).Node = GetNodeName(hXMLFilesNode)

						' Local MapInfo name of the Map table
						AllMaps(i).Name = GetSingleNodeValue(hXMLFilesNode, "TableName")

						' Prefix applied to map table when saving
						AllMaps(i).Prefix = GetSingleNodeValue(hXMLFilesNode, "Prefix")

						' Suffix applied to export file when saving
						AllMaps(i).Suffix = GetSingleNodeValue(hXMLFilesNode, "Suffix")

						' SQL clause used to retrieve the required rows from the map table
						AllMaps(i).Columns = GetSingleNodeValue(hXMLFilesNode, "Columns")

						' SQL clause used to select or order the required rows from the map table
						AllMaps(i).SelectCriteria = GetSingleNodeValue(hXMLFilesNode, "SelectCriteria")

						' SQL clause used to select or order the required rows for export
						AllMaps(i).ExportCriteria = GetSingleNodeValue(hXMLFilesNode, "ExportCriteria")

						' Key column used to determine unique records in the map table
						AllMaps(i).KeyColumn = GetSingleNodeValue(hXMLFilesNode, "KeyColumn")

						' Format required for the extract of the map table
						AllMaps(i).Format = GetSingleNodeValue(hXMLFilesNode, "Format")

						' Whether the layer can be retained after exporting
						AllMaps(i).Keep = GetSingleNodeValue(hXMLFilesNode, "KeepLayer")

						' Whether a warning should appear if the layer is not already loaded
						AllMaps(i).Warning = GetSingleNodeValue(hXMLFilesNode, "LoadWarning")

						' Whether the layer should be pre-selected
						AllMaps(i).Preselect = GetSingleNodeValue(hXMLFilesNode, "PreselectLayer")

						' Whether the label column can be overwritten
						AllMaps(i).Overwrite = GetSingleNodeValue(hXMLFilesNode, "OverwriteLabels")

						' Column name containing the map labels
						AllMaps(i).LabelColumn = GetSingleNodeValue(hXMLFilesNode, "LabelColumn")

						' Clause for setting the map labels
						AllMaps(i).LabelClause = GetSingleNodeValue(hXMLFilesNode, "LabelClause")

						' Whether the label number should be reset at this layer
						AllMaps(i).LabelReset = GetSingleNodeValue(hXMLFilesNode, "LabelReset")

						' Column name(s) to include in the combined sites table
						AllMaps(i).SiteColumns = GetSingleNodeValue(hXMLFilesNode, "CombinedSitesColumns")

						' Criteria for selecting site details for the combined sites table
						AllMaps(i).SiteCriteria = GetSingleNodeValue(hXMLFilesNode, "CombinedSitesCriteria")

						'-------------------------------------------------
						' Get a handle on the next attribute in the node map
						'-------------------------------------------------
						hXMLFilesNode = MIXMLGetNextNode(hXMLFilesNodeList)
					Loop

					Redim AllMaps(i)

				End If

			End If

		Else

			Note "Error opening XML config file 'DataSearches.xml'."
			Goto CleanUp

		End If

	End If

	'-------------------------------------------------
	' Trap errors
	'-------------------------------------------------
	OnError Goto GetDefaultsError

	'-------------------------------------------------
	' Separate the Buffer Unit options into two arrays
	'-------------------------------------------------
	Dim sDelimRows As String, sDelimCols As String
	sDelimRows = ";"
	sDelimCols = "$"
	Dim iRows As Integer
	iRows = StringToArrays(sBufferUnitOptions, aBufferUnits(), aBufferAbbrevs(), sDelimRows, sDelimCols)
	If iRows = 0 Then
		Note "Error: No Buffer Units found"
		Goto CleanUp
	End If

CleanUp:
	'-------------------------------------------------
	' Destroy the handles
	'-------------------------------------------------
	If hXMLFilesNode Then Call MIXmlNodeDestroy(hXMLFilesNode) End If
	If hXMLFilesNodeList Then Call MIXmlNodeListDestroy(hXMLFilesNodeList) End If
	If hXMLFilesNodeParent Then Call MIXmlNodeDestroy(hXMLFilesNodeParent) End If
	If hXMLSubNode Then Call MIXmlNodeDestroy(hXMLSubNode) End If
	If hXMLNode Then Call MIXmlNodeDestroy(hXMLNode) End If
	If hXMLRoot Then Call MIXmlNodeDestroy(hXMLRoot) End If
	If hXMLDoc Then Call MIXmlDocumentDestroy(hXMLDoc) End If

	Exit Sub

GetDefaultsError:
	Note "Error: " + str$(Err()) + ": " + Error$()
	Exit Sub

GetVariablesError:
	Resume Next

End Sub

Sub OpenDialog
'***************************************************************
'* Create the user dialog window
'***************************************************************

	'-------------------------------------------------
	' Trap errors
	'-------------------------------------------------
    OnError Goto ErrorTrap

	'-------------------------------------------------
	' Retrieve the default values from the config file
	'-------------------------------------------------
	Call GetDefaultValues

	'-------------------------------------------------
	' Check the search area table is open
	'-------------------------------------------------
	If TableIsOpen(sSearchTable) = False Then
		Note "Error: The search sites table '" + sSearchTable + "' is not open!"
		Goto Done
	End If

	'-------------------------------------------------
	' Build a new dialog window
	'-------------------------------------------------
	Dialog
		Title "Data Searches " + sVersion
		Width 235
		Height 270
		Position 50, 70
		Calling DialogSetup

	'-------------------------------------------------
	' Add an edit text box for the search reference
	'-------------------------------------------------
	Control StaticText Title "Search Ref:  "
		Position 10,10
	Control EditText
		ID 1
		Position 10,20
		Width 65
		'Into sSearchRef

	'-------------------------------------------------
	' Add a Find button for the search reference
	'-------------------------------------------------
	Control Button
		ID 91
		Title "Find"
		Position 90,20
		Width 40
		Hide
		Calling GetSiteName

	'-------------------------------------------------
	' Add an edit text box for the site name
	'-------------------------------------------------
	Control StaticText Title "Site Name:  "
		Position 10,40
	Control EditText
		ID 2
		Position 10,50
		Width 210
		Disable
		'Into sSiteName

	'-------------------------------------------------
	' Add a MapInfo table listbox
	'-------------------------------------------------
	Control StaticText Title "MapInfo Tables:  "
		Position 10,70
	Control MultiListBox
		ID 3
		Title ""
		Position 10,80
		Height 150
		Width 95

	'-------------------------------------------------
	' Add an edit text box for the buffer size
	'-------------------------------------------------
	Control StaticText Title "Buffer Size:  "
		Position 120,70
	Control EditText
		ID 4
		Value sDefaultBufferSize
		Position 120,80
		Width 60
		'Into sBufferSize

	'-------------------------------------------------
	' Add a radio group for the buffer units
	'-------------------------------------------------
	Control StaticText Title "Buffer Units:  "
		Position 120,100
	Control PopupMenu
		ID 5
		Value iDefaultBufferUnit
		Title From Variable aBufferUnits
		Position 120,110
		Width 60
		'Into iBufferInt

	'-------------------------------------------------
	' Add a checkbox for clearing the log file
	'-------------------------------------------------
	Control CheckBox
		ID 6
		Title "Clear log file?  "
		Position 10,250
		Value FALSE
		'Into bClearLog

	'-------------------------------------------------
	' Add a radio group for adding the selected tables
	' to the map window
	'-------------------------------------------------
	Control StaticText Title "Add Selected Tables to Map:  "
		ID 19
		Position 120,135
	Control PopupMenu
		ID 9
		Title sAddSelectedTablesOptions
		Position 120,145
		Width 100
		'Into iAddSelectedTables

	'-------------------------------------------------
	' Add a radio group for overwritting map labels
	'-------------------------------------------------
	Control StaticText Title "Overwrite Map Labels:  "
		ID 20
		Position 120,170
	Control PopupMenu
		ID 10
		Title sOverwriteLabelOptions
		Position 120,180
		Width 100
		'Into iOverwriteLabels

	'-------------------------------------------------
	' Add a checkbox for the combined sites table
	'-------------------------------------------------
	Control StaticText Title "Create Combined Sites Table:  "
		ID 21
		Position 120,205
	Control PopupMenu
		ID 11
		Title sCombinedSitesOptions
		Position 120,215
		Width 100
		'Into iAddSelectedTables

	'-------------------------------------------------
	' Add Ok and cancel buttons
	'-------------------------------------------------
	Control CancelButton
		Position 140,250
		Width 40
	Control Button
		ID 99
		Title "Ok"
		Position 185,250
		Width 40
		Calling CheckSelection

Done:
	Exit Sub
	
ErrorTrap:
	Note str$(Err()) + ": " + Error$()
	Call MyPrint("Error: " + str$(Err()) + " - " + Error$())
	Resume Done

End Sub

Sub DialogSetup
'***************************************************************
' Setup the dialog window listboxes
'***************************************************************

	'-------------------------------------------------
	' Clear the Message window and close it
	'-------------------------------------------------
	Print(Chr$(12))
	Close Window Message

	'-------------------------------------------------
	' Store the names of any tables not open
	'-------------------------------------------------
	Dim sClosedTables As String, iClosedCount As Integer
	sClosedTables = ""
	iClosedCount = 0

	'-------------------------------------------------
	' Loop through all the MapInfo tables listed in the
	' config file and add them to the Map Tables list
	' if they are open in MapInfo
	'-------------------------------------------------
	Dim j As Integer
	j = 0
	Dim i As Integer
	For i = 1 to UBound(AllMaps)

	Redim OpenMaps(99)
	Redim aOpenTables(99)

		'-------------------------------------------------
		' Concatenate all the Map tables into an array
		'-------------------------------------------------
		If TableIsOpen(AllMaps(i).Name) Then
			j = j + 1

			OpenMaps(j).Node = StringReplace(AllMaps(i).Node, "_", " ")
			OpenMaps(j).Name = AllMaps(i).Name
			OpenMaps(j).Prefix = AllMaps(i).Prefix
			OpenMaps(j).Suffix = AllMaps(i).Suffix
			OpenMaps(j).Columns = AllMaps(i).Columns
			OpenMaps(j).SelectCriteria = AllMaps(i).SelectCriteria
			OpenMaps(j).ExportCriteria = AllMaps(i).ExportCriteria
			OpenMaps(j).KeyColumn = AllMaps(i).KeyColumn
			OpenMaps(j).Format = AllMaps(i).Format
			OpenMaps(j).Keep = AllMaps(i).Keep
			OpenMaps(j).Preselect = AllMaps(i).Preselect
			OpenMaps(j).Overwrite = AllMaps(i).Overwrite
			OpenMaps(j).LabelColumn = AllMaps(i).LabelColumn
			OpenMaps(j).LabelClause = AllMaps(i).LabelClause
			OpenMaps(j).LabelReset = AllMaps(i).LabelReset
			OpenMaps(j).SiteColumns = AllMaps(i).SiteColumns
			OpenMaps(j).SiteCriteria = AllMaps(i).SiteCriteria
			
			aOpenTables(j) = StringReplace(AllMaps(i).Node, "_", " ")
		Else
			'-------------------------------------------------
			' Store the name of the closed table if the
			' warning is not to be suppressed.
			'-------------------------------------------------
			If UCase$(AllMaps(i).Warning) <> "NO" Then
				sClosedTables = sClosedTables + Chr$(13) + AllMaps(i).Name
				iClosedCount = iClosedCount + 1
			End If
		End If

	Next

	'-------------------------------------------------
	' Warn the user of the closed tables
	'-------------------------------------------------
	If iClosedCount > 0 Then
		If iClosedCount = 1 Then
			Note "Warning: the following table is not open ..." + Chr$(13) + sClosedTables
		Else
			Note "Warning: " + iClosedCount + " tables are not open, including ..." + Chr$(13)+ sClosedTables
		End If
	End If

	Redim OpenMaps(j)
	Redim aOpenTables(j)

	'-------------------------------------------------
	' Update the Map Table list to show the list of tables
	'-------------------------------------------------
	Alter Control 3 Title From Variable aOpenTables

	'-------------------------------------------------
	' Loop through all the open MapInfo tables and
	' pre-select them if this is required.
	'-------------------------------------------------
	For i = 1 to UBound(OpenMaps)

		'-------------------------------------------------
		' Set the control value if this table is to
		' be pre-selected.
		'-------------------------------------------------
		If UCase$(OpenMaps(i).Preselect) = "YES" Then
			Alter Control 3 Value i
		End If

	Next

SetDefaults:

	'-------------------------------------------------
	' Set the default values for controls
	'-------------------------------------------------
	If iDefaultAddSelectedTables > 0 Then
		Alter Control 9 Value iDefaultAddSelectedTables
	Else
		Alter Control 9 Value 1
	End If

	If iDefaultOverwriteLabels > 0 Then
		Alter Control 10 Value iDefaultOverwriteLabels
	Else
		Alter Control 10 Value 1
	End If

	If iDefaultCombinedSitesTable > 0 Then
		Alter Control 11 Value iDefaultCombinedSitesTable
	Else
		Alter Control 11 Value 1
	End If

	'-------------------------------------------------
	' Hide the controls if the defaults are blank
	'-------------------------------------------------
	If iDefaultAddSelectedTables = 0 Then
		Alter Control 19 Hide
		Alter Control 9 Hide
	End If
	
	If iDefaultOverwriteLabels = 0 Then
		Alter Control 20 Hide
		Alter Control 10 Hide
	End If
	
	If iDefaultCombinedSitesTable = 0 Then
		Alter Control 21 Hide
		Alter Control 11 Hide
	End If

	'-------------------------------------------------
	' If there is no database enable the site name
	' field, otherwise show the 'Show' button
	'-------------------------------------------------
	If sDatabase = "" or sEnquiriesDir = "" Then
		Alter Control 2 Enable
	Else
		Alter Control 91 Show
	End If

Exit Sub

End Sub

Sub GetSiteName
'***************************************************************
'* Get the site name for the search ref from the database
'***************************************************************

	'-------------------------------------------------
	' Get the site name from the database if it has
	' a path/name
	'-------------------------------------------------
	If sDatabase <> "" and sEnquiriesDir <> "" Then

		'-------------------------------------------------
		' Check a search ref has been entered
		'-------------------------------------------------
		Dim sRef As String
		sRef = ReadControlValue(1)
		If sRef = "" Then
			Note "Error: No Search Reference entered!"
			Exit Sub
		End If
	
		'-------------------------------------------------
		' Check if the Enquiries table is
		' already/still open and close it if it is
		'-------------------------------------------------
		If TableIsOpen("Enquiries") Then
			Close Table Enquiries
		End If

		'-------------------------------------------------
		' Ignore any error trying to open the table
		'-------------------------------------------------
		OnError Goto RegisterTable
	
		'-------------------------------------------------
		' Try and open the 'Enquiries' table
		'-------------------------------------------------
		Dim sEnquiriesTable As String
		sEnquiriesTable = sEnquiriesDir + "\Enquiries.tab"
		Dim sCmd As String
		sCmd = "Open Table " + Chr$(34) + sEnquiriesTable + Chr$(34) + " As Enquiries"
		Run Command (sCmd)
	
RegisterTable:
	
		'-------------------------------------------------
		' Trap errors
		'-------------------------------------------------
		OnError Goto ErrorTrap
	
		'-------------------------------------------------
		' If the 'Enquiries' table isn't open ...
		'-------------------------------------------------
		If TableIsOpen("Enquiries") = False Then
	
			'-------------------------------------------------
			' Register the 'Enquiries' table from the database
			'-------------------------------------------------
			sCmd = "Register Table " + Chr$(34) + sDatabase + Chr$(34) + " Type ACCESS Table " + Chr$(34) + "Enquiries" + Chr$(34) + " Into " + Chr$(34) + sEnquiriesTable + Chr$(34)
			Run Command (sCmd)
		
			'-------------------------------------------------
			' Open the 'Enquiries' table
			'-------------------------------------------------
			sCmd = "Open Table " + Chr$(34) + sEnquiriesTable + Chr$(34) + " As Enquiries"
			Run Command (sCmd)
			
		End If
	
		'-------------------------------------------------
		' Select the site name for the enquiry
		'-------------------------------------------------
		If ColumnInfo("Enquiries", sRefColumn, 3) = 3 Then
			sCmd = "Select " + sSiteColumn + " From Enquiries Where " + sRefColumn + " = " + sRef + " Into Enquiry NoSelect"
		Else
			sCmd = "Select " + sSiteColumn + " From Enquiries Where " + sRefColumn + " = " + Chr$(34) + sRef + Chr$(34) + " Into Enquiry NoSelect"
		End If
		Run Command (sCmd)
	
		'-------------------------------------------------
		' Count the number of rows selected
		'-------------------------------------------------
		Dim iRows As Integer
		iRows = TableInfo("Enquiry", TAB_INFO_NROWS)
	
		'-------------------------------------------------
		' If any rows were selected then set the object
		'-------------------------------------------------
		If iRows > 0 Then
	
			'-------------------------------------------------
			' Fetch the first of the selected rows
			'-------------------------------------------------
			Fetch First from Enquiry
	
			'-------------------------------------------------
			' Get the site name value and put it in the
			' site name field
			'-------------------------------------------------
			sSiteName = Enquiry.Col1
			Alter Control 2 Value sSiteName
	
		Else
	
			Note "Warning: Search Reference not found in database!"
	
		End If
	
		'-------------------------------------------------
		' Close the 'Enquiries' table
		'-------------------------------------------------
		Close Table Enquiries
		
	End If

	Exit Sub

ErrorTrap:
	Note "Error: " + str$(Err()) + ": " + Error$()
	Call MyPrint(str$(Err()) + ": " + Error$())
	Exit Sub

End Sub

Sub CheckSelection
'***************************************************************
'* Check the user's selections and process according
'***************************************************************

	'-------------------------------------------------
	' Trap errors
	'-------------------------------------------------
	OnError Goto ErrorTrap

	'-------------------------------------------------
	' Store the dialog variables
	'-------------------------------------------------
	sSearchRef = ReadControlValue(1)
	sSiteName = ReadControlValue(2)
	sBufferSize = ReadControlValue(4)
	iBufferInt = ReadControlValue(5)
	bClearLog = ReadControlValue(6)
	iAddSelectedTables = ReadControlValue(9)
	iOverwriteLabels = ReadControlValue(10)
	iCombinedSitesTable = ReadControlValue(11)

	'-------------------------------------------------
	' Check if the user has entered a search reference
	'-------------------------------------------------
	If sSearchRef = "" Then
		Note "Error: No search reference has been entered!"
		Exit Sub
	End If

	'-------------------------------------------------
	' Check if the user has entered a site name, or
	' if it has been (or can be) found in the database
	'-------------------------------------------------
	If sSiteName = "" Then
		If sDatabase = "" Then
			Note "Error: No site name has been entered!"
		Else
			Call GetSiteName
			If sSiteName = "" Then
				Note "Error: Site name not found for search reference!"
			End If
		End If
		Exit Sub
	End If

	'-------------------------------------------------
	' Check if the user has selected at least one table
	'-------------------------------------------------
	iMapTable = ReadControlValue(3)
	if iMapTable = 0 then
		Note "Error: No tables have been selected!"
		Exit Sub
	End If

	'-------------------------------------------------
	' Count the number of extracts to run
	'-------------------------------------------------
	iExtractTot = 0
	iExtractCnt = 0
	Redim SelectedMaps(99)
	Do While iMapTable > 0
		'-------------------------------------------------
		' Increment the counter
		'-------------------------------------------------
		iExtractTot = iExtractTot + 1

		'-------------------------------------------------
		' Store the selected map details
		'-------------------------------------------------
		SelectedMaps(iExtractTot).Node = OpenMaps(iMapTable).Node
		SelectedMaps(iExtractTot).Name = OpenMaps(iMapTable).Name
		SelectedMaps(iExtractTot).Prefix = OpenMaps(iMapTable).Prefix
		SelectedMaps(iExtractTot).Suffix = OpenMaps(iMapTable).Suffix
		SelectedMaps(iExtractTot).Columns = OpenMaps(iMapTable).Columns
		SelectedMaps(iExtractTot).SelectCriteria = OpenMaps(iMapTable).SelectCriteria
		SelectedMaps(iExtractTot).ExportCriteria = OpenMaps(iMapTable).ExportCriteria
		SelectedMaps(iExtractTot).KeyColumn = OpenMaps(iMapTable).KeyColumn
		SelectedMaps(iExtractTot).Format = OpenMaps(iMapTable).Format
		SelectedMaps(iExtractTot).Keep = OpenMaps(iMapTable).Keep
		SelectedMaps(iExtractTot).Overwrite = OpenMaps(iMapTable).Overwrite
		SelectedMaps(iExtractTot).LabelColumn = OpenMaps(iMapTable).LabelColumn
		SelectedMaps(iExtractTot).LabelClause = OpenMaps(iMapTable).LabelClause
		SelectedMaps(iExtractTot).LabelReset = OpenMaps(iMapTable).LabelReset
		SelectedMaps(iExtractTot).SiteColumns = OpenMaps(iMapTable).SiteColumns
		SelectedMaps(iExtractTot).SiteCriteria = OpenMaps(iMapTable).SiteCriteria

		'-------------------------------------------------
		' Read the next table selected in the list
		'-------------------------------------------------
		iMapTable = ReadControlValue(3)
	Loop

	Redim SelectedMaps(iExtractTot)

	'-------------------------------------------------
	' Check if the user has entered a buffer size
	'-------------------------------------------------
	If sBufferSize = "" Then
		Note "Error: No buffer size has been entered!"
		Exit Sub
	End If
	If isNumeric(ReadControlValue(4)) = False Then
		Note "Error: The buffer size is not numeric!"
		Exit Sub
	End If

	'-------------------------------------------------
	' Check if the user has selected a buffer unit
	'-------------------------------------------------
	If iBufferInt = 0 Then
		Note "Error: No buffer unit has been selected!"
		Exit Sub
	End If

	'-------------------------------------------------
	' Store the buffer unit option
	'-------------------------------------------------
	sBufferUnit = aBufferAbbrevs(iBufferInt)

	'-------------------------------------------------
    ' Remove all characters except numbers and internal spaces from Reference Number
	'-------------------------------------------------
    sShortRefNo = StringReplace(sSearchRef, "/", sRepChar)
    sShortRefNo = LTrim$(RTrim$(KeepNumbersAndSpaces(sShortRefNo, sRepChar)))

	Dim iLastPos As Integer, iNextPos As Integer
	iLastPos = 1

FindNextPos:
	iNextPos = Instr(iLastPos, sShortRefNo, sRepChar)
    If iNextPos > 0 Then
    	iLastPos = iNextPos + 1
    	goto FindNextPos
    End If

	If iLastPos > 1 Then
	    sSubRefNo = Mid$(sShortRefNo, iLastPos, 99)
    Else
    	sSubRefNo = sShortRefNo
    End If
    
	'-------------------------------------------------
    ' Replace any variables
	'-------------------------------------------------
    sSaveFolder = StringReplace(sSaveFolder, "%ref%", sSearchRef)
    sSaveFolder = StringReplace(sSaveFolder, "%shortref%", sShortRefNo)
    sSaveFolder = StringReplace(sSaveFolder, "%subref%", sSubRefNo)
    sSaveFolder = StringReplace(sSaveFolder, "%sitename%", sSiteName)
    
    sGISFolder = StringReplace(sGISFolder, "%ref%", sSearchRef)
    sGISFolder = StringReplace(sGISFolder, "%shortref%", sShortRefNo)
    sGISFolder = StringReplace(sGISFolder, "%subref%", sSubRefNo)
    sGISFolder = StringReplace(sGISFolder, "%sitename%", sSiteName)
    
    sLogFileName = StringReplace(sLogFileName, "%ref%", sSearchRef)
    sLogFileName = StringReplace(sLogFileName, "%shortref%", sShortRefNo)
    sLogFileName = StringReplace(sLogFileName, "%subref%", sSubRefNo)
    sLogFileName = StringReplace(sLogFileName, "%sitename%", sSiteName)
    
	'-------------------------------------------------
    ' Remove any invalid characters from file/folder names
	'-------------------------------------------------
    sSaveFolder = LTrim$(RTrim$(ReplaceSpecialChars(sSaveFolder, sRepChar)))
    sGISFolder = LTrim$(RTrim$(ReplaceSpecialChars(sGISFolder, sRepChar)))
    sLogFileName = LTrim$(RTrim$(ReplaceSpecialChars(sLogFileName, sRepChar)))

	'-------------------------------------------------
    ' Set the group layer name to use
	'-------------------------------------------------
    Dim sSpaceChar As String
    sSpaceChar = "_"
    sGroupLayer = StringReplace(sSearchRef, "/", sSpaceChar)
    sGroupLayer = LTrim$(RTrim$(KeepNumbersAndSpaces(sGroupLayer, sSpaceChar)))
	
	'-------------------------------------------------
	' Create the request folder if it doesn't
	' already exist
	'-------------------------------------------------
	Dim sRootPath As String
	If sSaveFolder = "" then
		sRootPath = sSaveRootDir
	Else
		sRootPath = sSaveRootDir + "\" + sSaveFolder
	End If
	
	Dim iSuccess, iSecurity As Integer
	iSecurity = 0
	iSuccess = SetCurrentDirectory(sRootPath)
	if iSuccess = 0 Then
		iSuccess = CreateDirectory(sRootPath, iSecurity)
		if iSuccess = 0 Then
			Note "Error: Unable to create search folder. Process terminated."
			Exit Sub
		End If
	End If
	
	'-------------------------------------------------
	' Create the GIS sub-folder if it doesn't
	' already exist
	'-------------------------------------------------
	If sGISFolder = "" then
		sLocalPath = sRootPath
	Else
		sLocalPath = sRootPath + "\" + sGISFolder
	End If
	
	iSecurity = 0
	iSuccess = SetCurrentDirectory(sLocalPath)
	if iSuccess = 0 Then
		iSuccess = CreateDirectory(sLocalPath, iSecurity)
		if iSuccess = 0 Then
			Note "Error: Unable to create search sub-folder. Process terminated."
			Exit Sub
		End If
	End If
	
	'-------------------------------------------------
	' Set the log file name for the output messages
	'-------------------------------------------------
	sLogFile = sLocalPath + "\" + sLogFileName
	
	'-------------------------------------------------
	' Clear the log file
	'-------------------------------------------------
	If bClearLog = True Then
		If FileExists(sLogFile) Then
			Kill sLogFile
		End If
	End If

	Call MyPrint("----------------------------------------------------------------------")
	Call MyPrint("Processing search '" + sSearchRef + "' ...")
	Call MyPrint("----------------------------------------------------------------------")
	Call MyPrint("")

	'-------------------------------------------------
	' Find the window numbers of all map windows
	'-------------------------------------------------
	Dim iWindowNum As Integer, iLayerNum As Integer
	Dim bMapWindow As Logical, bGroupFound as logical
	iNumWindows = 0
	Redim aWindowId(99)
	Redim aWindowGroup(99)
	
	' Loop through all the windows
	For iWindowNum = 1 to NumWindows()
	
		' Check if the window is a map window
		If WindowInfo(WindowId(iWindowNum),WIN_INFO_TYPE) = WIN_MAPPER Then
		
			bMapWindow = False
			
			' Loop through all the map layers in the map window
			For iLayerNum = 1 to MapperInfo(WindowId(iWindowNum),MAPPER_INFO_LAYERS)
			
				' Check if the layer is a normal layer
				If LayerInfo(WindowId(iWindowNum),iLayerNum, LAYER_INFO_TYPE) = LAYER_INFO_TYPE_NORMAL Then
					bMapWindow = True
					Exit For
				End If
			
			Next

			' If the window contains any normal map layers then
			' add it to the array of map windows
			If bMapWindow = True Then

				' Increment the windows number				
				iNumWindows = iNumWindows + 1
				
				' Store the window ID
				aWindowId(iNumWindows) = WindowId(iWindowNum)

				bGroupFound = False

				' Loop through all the group layers in the map window
				For iLayerNum = 1 to MapperInfo(WindowId(iWindowNum),MAPPER_INFO_GROUPLAYERS)
				
					' Check if the layer is the group layer
					If GroupLayerInfo(WindowId(iWindowNum),iLayerNum, GROUPLAYER_INFO_NAME) = sGroupLayer Then
						bGroupFound = True
						Exit For
					End If
				
				Next

				' If the window contains the group layer then store
				' the group layer name in the array of map windows
				If bGroupFound = True Then
					Call MyPrint("Group layer '" + sGroupLayer + "' found in map window " + iNumWindows + ".")
					aWindowGroup(iNumWindows) = sGroupLayer
				Else
					aWindowGroup(iNumWindows) = ""
				End If
			
			End If

		End If

	Next
	
	Redim aWindowId(iNumWindows)
	Redim aWindowGroup(iNumWindows)

	'-------------------------------------------------
	' Call the subroutine to buffer the search area
	' with the required size and units
	'-------------------------------------------------
	Call BufferSearch
	Dim lResponse As Logical
	If sBufferTable = "" Then
		Call MyPrint("Error buffering search reference.")
		Call MyPrint("")
		Call MyPrint("----------------------------------------------------------------------")
		Call MyPrint("Process stopped!")
		Call MyPrint("----------------------------------------------------------------------")
		lResponse = Ask("Processing stopped!" + Chr$(10) + Chr$(10) + Chr$(10) + "Do you wish to close the form?", "Yes", "No")
		Goto Response
	End If

	'-------------------------------------------------
	' If a combined sites table is to be appended to
	' or over-written.
	'-------------------------------------------------
	If iCombinedSitesTable > 1 Then

		Dim sSitesTable As String
		sSitesTable = sSubRefNo + sCombinedSitesSuffix
	
		'-------------------------------------------------
		' If a combined sites table is to be appended to
		' (and already exists) ...
		'-------------------------------------------------
		If iCombinedSitesTable = 2 And TabFileExists(sLocalPath + "\" + sCombinedSitesTable + ".tab") = True Then

			'-------------------------------------------------
			' Open the existing combined sites table.
			'-------------------------------------------------
			If OpenCombinedSitesTable(sSitesTable) = False Then
			
				Call MyPrint("Error opening combined sites table.")
				Call MyPrint("")
				Call MyPrint("----------------------------------------------------------------------")
				Call MyPrint("Process stopped!")
				Call MyPrint("----------------------------------------------------------------------")
				lResponse = Ask("Processing stopped!" + Chr$(10) + Chr$(10) + Chr$(10) + "Do you wish to close the form?", "Yes", "No")
				Goto Response
			
			End If
		End If

		'-------------------------------------------------
		' If a combined sites table is to be over-written
		' (or doesn't exist) ...
		'-------------------------------------------------
		If iCombinedSitesTable = 3 Or TabFileExists(sLocalPath + "\" + sCombinedSitesTable + ".tab") = False Then
		
			'-------------------------------------------------
			' Create a new combined sites table.
			'-------------------------------------------------
			If CreateCombinedSitesTable(sSitesTable) = False Then
			
				Call MyPrint("Error creating combined sites table.")
				Call MyPrint("")
				Call MyPrint("----------------------------------------------------------------------")
				Call MyPrint("Process stopped!")
				Call MyPrint("----------------------------------------------------------------------")
				lResponse = Ask("Processing stopped!" + Chr$(10) + Chr$(10) + Chr$(10) + "Do you wish to close the form?", "Yes", "No")
				Goto Response
			
			End If
		End If
		
	End If

	'-------------------------------------------------
	' Process the selections one by one
	'-------------------------------------------------
	iExtractCnt = 1
	iMapLabelCounter = 1
	ProgressBar "Processing data search " + sSearchRef + " ..."
		Calling ProcessExtracts
		Range iExtractTot

	'-------------------------------------------------
	' Don't trap any errors
	'-------------------------------------------------
	OnError Goto IgnoreError
	
	If CommandInfo(CMD_INFO_STATUS) Then
		If iExtractCnt <= iExtractTot Then
			Call MyPrint("")
			Call MyPrint("----------------------------------------------------------------------")
			Call MyPrint("Process did not complete!")
			Call MyPrint("----------------------------------------------------------------------")
			lResponse = Ask("Processing incomplete!" + Chr$(10) + Chr$(10) + Chr$(10) + "Do you wish to close the form?", "Yes", "No")
			Goto Response
		End If
	Else
		Call MyPrint("")
		Call MyPrint("----------------------------------------------------------------------")
		Call MyPrint("Process interrupted by user!")
		Call MyPrint("----------------------------------------------------------------------")
		lResponse = Ask("Processing interrupted!" + Chr$(10) + Chr$(10) + Chr$(10) + "Do you wish to close the form?", "Yes", "No")
		Goto Response
	End If

	'-------------------------------------------------
	' Trap errors
	'-------------------------------------------------
	OnError Goto ErrorTrap
	
	'-------------------------------------------------
	' Export the combined sites table
	'-------------------------------------------------
	If iCombinedSitesTable > 1 Then
		
		'-------------------------------------------------
		' Count the number of rows in the combined
		' sites table
		'-------------------------------------------------
		Dim iSitesTotal As Integer
		iSitesTotal = TableInfo(sCombinedSitesTable, TAB_INFO_NROWS)
	
		'-------------------------------------------------
		' Save the combined sites table changes
		'-------------------------------------------------
		If iSitesTotal > 0 Then
			Call MyPrint("Saving combined sites table ...")
			Call MyPrint(iSitesTotal + " records saved.")
			Commit Table sCombinedSitesTable
		End If

		'-------------------------------------------------
		' Export the combined sites table as a DBF file
		'-------------------------------------------------
		If UCase$(sCombinedSitesFormat) = "DBF" Then
			Call MyPrint("Creating combined sites table as a DBF file ...")
			Export sCombinedSitesTable
				Into sLocalPath + "\" + sSitesTable + ".dbf"
				Type "DBF"
				CharSet "WindowsLatin1"
				Overwrite
		End If
	
		'-------------------------------------------------
		' Export the combined sites table as a TXT file
		'-------------------------------------------------
		If UCase$(sCombinedSitesFormat) = "TXT" Then
			Call MyPrint("Creating combined sites table as a TXT file ...")
			Export sCombinedSitesTable
				Into sLocalPath + "\" + sSitesTable + ".txt"
				Type "ASCII"
				Delimiter ","
				CharSet "WindowsLatin1"
				Overwrite
		End If
		
		'-------------------------------------------------
		' Export the combined sites table as a CSV file
		'-------------------------------------------------
		If UCase$(sCombinedSitesFormat) = "CSV" Then
			Call MyPrint("Creating combined sites table as a CSV file ...")
			Export sCombinedSitesTable
				Into sLocalPath + "\" + sSitesTable + ".csv"
				Type "CSV"
				CharSet "WindowsLatin1"
				Titles
				Overwrite
		End If
	
		'-------------------------------------------------
		' Close the combined sites table
		'-------------------------------------------------
		Call MyPrint("Closing combined sites table ...")
		Close Table sCombinedSitesTable

	End If

	'-------------------------------------------------
	' Rename the local buffer table
	'-------------------------------------------------
	'Call MyPrint("Renaming buffer table ...")
	Close Table sBufferTable

	Dim sBufferString As String
	sBufferString = LTrim$(RTrim$(StringReplace(sBufferSize, ".", "_")))

	Dim sLocalTable As String
	sLocalTable = "Buffer_" + sSubRefNo + "_" + sBufferString + sBufferUnit

	Dim sCmd As String
	sCmd = "Open Table " + Chr$(34) + sLocalPath + "\" + sLocalTable + ".tab" + Chr$(34) + " As " + sLocalTable
	Run Command (sCmd)

	'-------------------------------------------------
	' Add the search area and buffer tables to all
	' map windows and zoom to the extent of the buffer
	' table
	'-------------------------------------------------
	For iWindowNum = 1 to iNumWindows

		'-------------------------------------------------
		' Add a group layer if it doesn't already exist
		'-------------------------------------------------
		If aWindowGroup(iWindowNum) <> sGroupLayer Then
			Call MyPrint("Adding group layer '" + sGroupLayer + "' to map window " + iWindowNum + " ...")

			sCmd = "Add Map Window " + aWindowId(iWindowNum) + " GroupLayer(" + Chr$(34) + sGroupLayer + Chr$(34) + ")"
			Run Command (sCmd)
			
			' Store the group layer name for this window
			aWindowGroup(iWindowNum) = sGroupLayer
		End If

		'-------------------------------------------------
		' Add the search area table to the map window
		'-------------------------------------------------
		Call MyPrint("Adding search area layer '" + sSearchAreaTable + "' to map window " + iWindowNum + " ...")

		If aWindowGroup(iWindowNum) = sGroupLayer Then
			sCmd = "Add Map Window " + aWindowId(iWindowNum) + " Layer " + sSearchAreaTable + " DestGroupLayer " + Chr$(34) + sGroupLayer + Chr$(34)
			Run Command (sCmd)
		Else
			sCmd = "Add Map Window " + aWindowId(iWindowNum) + " Layer " + sSearchAreaTable
			Run Command (sCmd)
		End If

		'-------------------------------------------------
		' Get the layer number of the search area table
		' (just added)
		'-------------------------------------------------
		Dim iNumTables As Integer
		iNumTables = MapperInfo(aWindowId(iWindowNum), MAPPER_INFO_LAYERS)
		Dim	iNumBufferTable as Integer
		For iNumBufferTable = 1 to iNumTables
			If LayerInfo(aWindowId(iWindowNum),iNumBufferTable, LAYER_INFO_NAME) = sSearchAreaTable Then
				Exit For
			End If
		Next

		'-------------------------------------------------
		' Set the symbology for the search area table
		'-------------------------------------------------
		sCmd = "Set Map Window " + aWindowId(iWindowNum) + " Layer " + iNumBufferTable + " Display Global " + sSearchAreaSymbology
		Run Command (sCmd)

		'-------------------------------------------------
		' Add the buffer table to the map window
		'-------------------------------------------------
		Call MyPrint("Adding buffer area layer '" + sLocalTable + "' to map window " + iWindowNum + " ...")

		If aWindowGroup(iWindowNum) = sGroupLayer Then
			sCmd = "Add Map Window " + aWindowId(iWindowNum) + " Layer " + sLocalTable + " DestGroupLayer " + Chr$(34) + sGroupLayer + Chr$(34)
			Run Command (sCmd)
		Else
			sCmd = "Add Map Window " + aWindowId(iWindowNum) + " Layer " + sLocalTable
			Run Command (sCmd)
		End If

		'-------------------------------------------------
		' Get the layer number of the buffer table (just added)
		'-------------------------------------------------
		iNumTables = MapperInfo(aWindowId(iWindowNum), MAPPER_INFO_LAYERS)
		For iNumBufferTable = 1 to iNumTables
			If LayerInfo(aWindowId(iWindowNum),iNumBufferTable, LAYER_INFO_NAME) = sLocalTable Then
				Exit For
			End If
		Next

		'-------------------------------------------------
		' Set the symbology for the local buffer table
		'-------------------------------------------------
		sCmd = "Set Map Window " + aWindowId(iWindowNum) + " Layer " + iNumBufferTable + " Display Global " + sBufferSymbology
		Run Command (sCmd)

		'-------------------------------------------------
		' Zoom to the local buffer table
		'-------------------------------------------------
		Set Map Window aWindowId(iWindowNum) Zoom Entire Layer iNumBufferTable

	Next

	'-------------------------------------------------
	' Don't trap any errors
	'-------------------------------------------------
	OnError Goto IgnoreError
	
	Call MyPrint("")
	Call MyPrint("----------------------------------------------------------------------")
	Call MyPrint("Process completed!")
	Call MyPrint("----------------------------------------------------------------------")
	
	'-------------------------------------------------
	' Ask the user if they want to close the form
	'-------------------------------------------------
	lResponse = Ask("Processing complete!" + Chr$(10) + Chr$(10) + Chr$(10) + "Do you wish to close the form?", "Yes", "No")

Response:
	If lResponse = True Then
		'-------------------------------------------------
		' Close the dialog
		'-------------------------------------------------
		Dialog Remove

	End If

	'-------------------------------------------------
	' Display the log file in the message window
	'-------------------------------------------------
	Call PrintLogFile

	Exit Sub

ErrorTrap:
	Note "Error: " + str$(Err()) + ": " + Error$()
	Call MyPrint(str$(Err()) + ": " + Error$())
	Exit Sub

IgnoreError:
	Resume Next

End Sub

Sub BufferSearch
'*************************************************
'* Routine to buffer the search area with the
'* required size and units.
'*************************************************

	Call MyPrint("Buffering search reference for " + sBufferSize + sBufferUnit + " ...")

	'-------------------------------------------------
	' Setup the search site output table name
	'-------------------------------------------------
	sSearchAreaTable = "Search_Area_" + sSubRefNo

	'-------------------------------------------------
	' Setup the temporary and buffer table names
	'-------------------------------------------------
	Dim sBufferString As String
	sBufferString = LTrim$(RTrim$(StringReplace(sBufferSize, ".", "_")))

	Dim sLocalTable As String
	sLocalTable = "Buffer_" + sSubRefNo + "_" + sBufferString + sBufferUnit

	sBufferTable = "Buffer_Area"

	'-------------------------------------------------
	' Get the name of the cosmetic layer in the first
	' map window
	'-------------------------------------------------
	Dim sCosmeticLayer As String
	sCosmeticLayer = WindowInfo(aWindowId(1), WIN_INFO_TABLE)

	'-------------------------------------------------
	' Find the layer number of the search table by
	' looking through all the windows until it is
	' found
	'-------------------------------------------------
	Dim iNumWindows As Integer
	iNumWindows = UBound(aWindowId)
	Dim iWindowNum As Integer
	For iWindowNum = 1 to iNumWindows
		Dim iNumTables As Integer
		Dim iNumSearchTable as Integer
		iNumTables = MapperInfo(aWindowId(iWindowNum), MAPPER_INFO_LAYERS)
		For iNumSearchTable = 1 to iNumTables
			If LayerInfo(aWindowId(iWindowNum),iNumSearchTable, LAYER_INFO_NAME) = sSearchTable Then
				Goto EditLayer
			End If
		Next
	Next

EditLayer:
	'-------------------------------------------------
	' Save the search table (in case it has
	' unsaved edits)
	'-------------------------------------------------
	If TableInfo(sSearchTable, TAB_INFO_EDITED) Then
		Call MyPrint("Saving table " + sSearchTable + " ...")
		Commit Table sSearchTable
	End If

	'-------------------------------------------------
	' Check if the old search area table is
	' already/still open and close it if it is
	'-------------------------------------------------
	If TableIsOpen(sSearchAreaTable) Then
		Call MyPrint("Closing existing search area table ...")
		Close Table sSearchAreaTable
	End If

	'-------------------------------------------------
	' Check if the old buffer table is
	' already/still open and close it if it is
	'-------------------------------------------------
	If TableIsOpen(sLocalTable) Then
		Call MyPrint("Closing existing buffer table ...")
		Close Table sLocalTable
	End If

	'-------------------------------------------------
	' Select the required reference in the search table
	' and put it into the search area table
	'-------------------------------------------------
	Call MyPrint("Selecting reference feature(s) ...")
	Dim sCmd as String
	sCmd = "Select * from " + sSearchTable + " Where " + sSearchColumn + " = " + Chr$(34) + sSearchRef + Chr$(34) + " Into " + sSearchAreaTable
	Run Command (sCmd)

	'-------------------------------------------------
	' Count the number of objects that have
	' been selected in the search area table
	'-------------------------------------------------
	Dim iRecTotal As Integer
	iRecTotal = TableInfo(sSearchAreaTable, TAB_INFO_NROWS)

	'-------------------------------------------------
	' Check if any records were selected
	'-------------------------------------------------
	If iRecTotal = 0 Then
		Call MyPrint("Reference '" + sSearchRef + "' not found in '" + sSearchTable + "' table.")
		Note "Error: Reference '" + sSearchRef + "' not found in '" + sSearchTable + "' table."
		sBufferTable = ""
		Exit Sub
	End If

	'-------------------------------------------------
	' Save the search area table
	'-------------------------------------------------
	Call MyPrint("Saving search area table ...")
	sCmd = "Commit Table " + sSearchAreaTable + " As " + Chr$(34) + sLocalPath + "\" + sSearchAreaTable + ".tab" + Chr$(34) + " TYPE NATIVE Charset " + Chr$(34) + "WindowsLatin1" + Chr$(34)
	Run Command (sCmd)

	'-------------------------------------------------
	' Make the cosmetic layer editable
	'-------------------------------------------------
	Set Map Window aWindowId(1) Layer 0 Editable On

	'-------------------------------------------------
	' Buffer the selected search area (from the
	' search area table)
	'-------------------------------------------------
	Call MyPrint("Buffering the search reference ...")
	sCmd = "Create Object As Buffer From " + sSearchAreaTable + " Width " + sBufferSize + " Units " + Chr$(34) + sBufferUnit + Chr$(34) + " Type Spherical Resolution 100 Into Table " + sCosmeticLayer
	Run Command (sCmd)

	'-------------------------------------------------
	' Check if the buffer table is
	' already/still open and close it if it is
	'-------------------------------------------------
	If TableIsOpen(sBufferTable) Then
		Call MyPrint("Closing buffer table ...")
		Close Table sBufferTable
	End If

	'-------------------------------------------------
	' Create the buffer table
	'-------------------------------------------------
	Call MyPrint("Creating the buffer table ...")
	sCmd = "Create Table " + Chr$(34) + sBufferTable + Chr$(34) + " (ID Integer) File " + Chr$(34) + sLocalPath + "\" + sLocalTable + ".tab" + Chr$(34) + " TYPE NATIVE Charset " + Chr$(34) + "WindowsLatin1" + Chr$(34)
	Run Command (sCmd)

	'-------------------------------------------------
	' Make buffer table mappable
	'-------------------------------------------------
	sCmd = "Create Map For " + sBufferTable + " CoordSys " + sCoordSys
	Run Command (sCmd)

	'-------------------------------------------------
	' Insert the buffer area into the buffer table
	'-------------------------------------------------
	sCmd = "Insert Into " + sBufferTable + "(obj) Select obj From " + sCosmeticLayer
	Run Command (sCmd)

	'-------------------------------------------------
	' Save the buffer table
	'-------------------------------------------------
	Commit Table sBufferTable

	'-------------------------------------------------
	' Close the selection table
	'-------------------------------------------------
	Close Table Selection

	'-------------------------------------------------
	' Close the latest query table
	'-------------------------------------------------
	Dim t As SmallInt
	For t = NumTables() to 1 Step -1
		If TableInfo(t, TAB_INFO_TEMP) = True And TableInfo(t, TAB_INFO_MAPPABLE) = False Then
			Close Table TableInfo(t, TAB_INFO_NAME)
			Exit For
		End If
	Next

	'-------------------------------------------------
	' Undo the updates to the cosmetic layer to remove
	' the temporary buffered object
	'-------------------------------------------------
	Rollback Table sCosmeticLayer

	'-------------------------------------------------
	' Make the cosmetic layer non-editable
	'-------------------------------------------------
	Set Map Window aWindowId(1) Layer 0 Editable Off

	'-------------------------------------------------
	' Turn off the search table (if it is visible)
	'-------------------------------------------------
	If LayerInfo(aWindowId(iWindowNum),iNumSearchTable,LAYER_INFO_DISPLAY) <> 0 Then
		Set Map Window aWindowId(iWindowNum) Layer iNumSearchTable Display Off
	End If

	Call MyPrint("Buffering complete.")
	Call MyPrint("")

End Sub

Function CreateCombinedSitesTable(sSitesTable As String) As Logical
	
'*************************************************
'* Routine to create a combined sites table.
'*************************************************

	CreateCombinedSitesTable = False

	OnError Goto ErrorTrap

	'-------------------------------------------------
	' Check if an old combined sites table is
	' already/still open and close it if it is
	'-------------------------------------------------
	If TableIsOpen(sCombinedSitesTable) Then
		Call MyPrint("Closing existing combined sites table ...")
		Close Table sCombinedSitesTable
	End If
	
	'-------------------------------------------------
	' Create a temporary combined sites table.
	'-------------------------------------------------
	Dim sCmd As String
	sCmd = "Create Table " + Chr$(34) + sCombinedSitesTable + Chr$(34) + " (" + sCombinedSitesColumns + ") file " + Chr$(34) + sLocalPath + "\" + sCombinedSitesTable + ".tab" + Chr$(34) + " TYPE NATIVE Charset " + Chr$(34) + "WindowsLatin1" + Chr$(34)
	Run Command (sCmd)

	Call MyPrint("Creation complete.")
	Call MyPrint("")
	
	CreateCombinedSitesTable = True
	Exit Function

ErrorTrap:
	Note "Error: " + str$(Err()) + ": " + Error$()
	Call MyPrint(str$(Err()) + ": " + Error$())
	Exit Function

End Function

Function OpenCombinedSitesTable(sSitesTable As String) As Logical
	
'*************************************************
'* Routine to open a combined sites table.
'*************************************************

	OpenCombinedSitesTable = False

	'-------------------------------------------------
	' Check if the combined sites table is
	' already/still open and close it if it is
	'-------------------------------------------------
	If TableIsOpen(sCombinedSitesTable) Then
		Call MyPrint("Closing existing combined sites table ...")
		Close Table sCombinedSitesTable
		Call MyPrint("Re-opening existing combined sites table ...")
	Else
		Call MyPrint("Opening existing combined sites table ...")
	End If

	'-------------------------------------------------
	' Catch any errors trying to open the table
	'-------------------------------------------------
	OnError Goto ErrorTrap

	'-------------------------------------------------
	' Try and open the combined sites table
	'-------------------------------------------------
	Dim sSitesTableName As String
	sSitesTableName = sLocalPath + "\" + sCombinedSitesTable + ".tab"
	
	Dim sCmd As String
	sCmd = "Open Table " + Chr$(34) + sSitesTableName + Chr$(34) + " As " + sCombinedSitesTable
	Run Command (sCmd)
	
	Call MyPrint("Open complete.")
	Call MyPrint("")
	
	OpenCombinedSitesTable = True
	Exit Function

ErrorTrap:
	Note "Error: " + str$(Err()) + ": " + Error$()
	Call MyPrint(str$(Err()) + ": " + Error$())
	Exit Function

End Function

Sub ProcessExtracts
'***************************************************************
'* Process each combination of table and partner
'***************************************************************

	'-------------------------------------------------
	' Trap errors by skipping to the next selection
	'-------------------------------------------------
	OnError Goto NextSelection

	Dim SelectedMap As MapDetails
	SelectedMap.Node = SelectedMaps(iExtractCnt).Node
	SelectedMap.Name = SelectedMaps(iExtractCnt).Name
	SelectedMap.Prefix = SelectedMaps(iExtractCnt).Prefix
	SelectedMap.Suffix = SelectedMaps(iExtractCnt).Suffix
	SelectedMap.Columns = SelectedMaps(iExtractCnt).Columns
	SelectedMap.SelectCriteria = SelectedMaps(iExtractCnt).SelectCriteria
	SelectedMap.ExportCriteria = SelectedMaps(iExtractCnt).ExportCriteria
	SelectedMap.KeyColumn = SelectedMaps(iExtractCnt).KeyColumn
	SelectedMap.Format = SelectedMaps(iExtractCnt).Format
	SelectedMap.Keep = SelectedMaps(iExtractCnt).Keep
	SelectedMap.Overwrite = SelectedMaps(iExtractCnt).Overwrite
	SelectedMap.LabelColumn = SelectedMaps(iExtractCnt).LabelColumn
	SelectedMap.LabelClause = SelectedMaps(iExtractCnt).LabelClause
	SelectedMap.LabelReset = SelectedMaps(iExtractCnt).LabelReset
	SelectedMap.SiteColumns = SelectedMaps(iExtractCnt).SiteColumns
	SelectedMap.SiteCriteria = SelectedMaps(iExtractCnt).SiteCriteria

	Call MyPrint("Processing table = '" + SelectedMap.Node + "' (" + iExtractCnt + " of " + iExtractTot + ") ...")

	'-------------------------------------------------
	' Call the subroutine to select the records from
	' the selected table
	'-------------------------------------------------
	
	Call SelectMaps(SelectedMap)

	Call MyPrint("Completed table = '" + SelectedMap.Node + "'.")
	Call MyPrint("")

NextSelection:

	'-------------------------------------------------
	' Increment the progress bar counter
	'-------------------------------------------------
	iExtractCnt = iExtractCnt + 1

	'-------------------------------------------------
	' If all the tables in the list have been processed
	'-------------------------------------------------
	If iExtractCnt > iExtractTot Then
		'-------------------------------------------------
		' Halt processing
		'-------------------------------------------------
		ProgressBar = -1
	Else
		'-------------------------------------------------
		' Show progress
		'-------------------------------------------------
		ProgressBar = iExtractCnt
	End If

End Sub

Sub SelectMaps(SelectedMap As MapDetails)
'*************************************************
'* Routine to select the records from the
'* MapInfo table name passed in the call that
'* intersect with the boundary passed in the call.
'*************************************************

	'-------------------------------------------------
	' Trap errors
	'-------------------------------------------------
	OnError Goto ErrorTrap

	'-------------------------------------------------
	' Setup the local table name and temp name
	'-------------------------------------------------
	Dim sLocalName As String, sExportName As String, sExportTemp As String
	sLocalName = SelectedMap.Prefix + "_" + sSubRefNo
	sExportName = sSubRefNo + SelectedMap.Suffix
	sExportTemp = "X" + SelectedMap.Suffix

	Dim sSelectName As String
	sSelectName = "Select_Table"

	'-------------------------------------------------
	' Check if the local table is already/still open
	' and close it if it is
	'-------------------------------------------------
	If TableIsOpen(sLocalName) Then
		Call MyPrint("Closing local table ...")
		Close Table sLocalName
	End If

	If TableIsOpen(sSelectName) Then
		Call MyPrint("Closing select table ...")
		Close Table sSelectName
	End If

	If TableIsOpen(sExportName) Then
		Call MyPrint("Closing export table ...")
		Close Table sExportName
	End If

	'-------------------------------------------------
	' Set the additional selection criteria
	'-------------------------------------------------
	Dim sSelectCriteria As String
	If SelectedMap.SelectCriteria = "" Then
		sSelectCriteria = ""
	Else
		sSelectCriteria = " And (" + SelectedMap.SelectCriteria + ")"
	End if
	
	'-------------------------------------------------
	' Reset the map label counter if required before
	' processing this table
	'-------------------------------------------------
	If iOverwriteLabels = 3 And UCase$(SelectedMap.LabelReset) = "YES" Then
		Call MyPrint("Reseting label counter ...")
		iMapLabelCounter = 1
	End If

	'-------------------------------------------------
	' Execute the SQL statement to select the table
	' records intersecting with the required
	' partner boundary
	'-------------------------------------------------
	Call MyPrint("Executing spatial selection ...")
	Dim sCmd as String
	If SelectedMap.KeyColumn = "" Then
		sCmd = "Select * From " + SelectedMap.Name + " Where obj Intersects Any (Select Obj From " + sBufferTable + ")" + sSelectCriteria + " Into " + sSelectName
	Else
		sCmd = "Select * From " + SelectedMap.Name + " Where obj Intersects Any (Select Obj From " + sBufferTable + ")" + sSelectCriteria + " Order By " + SelectedMap.KeyColumn + " Into " + sSelectName
	End If
	Run Command (sCmd)

	'-------------------------------------------------
	' Count the number of records that have
	' been selected
	'-------------------------------------------------
	Dim iRecTotal As Integer
	iRecTotal = TableInfo(sSelectName, TAB_INFO_NROWS)

	'-------------------------------------------------
	' Check if the maximum number of records will be
	' exceeded
	'-------------------------------------------------
	If iRecTotal > iRecMax Then
		Call MyPrint("Record count exceeds maximum of " + iRecMax + " - table skipped.")
		Close Table sSelectName
		Exit Sub
	End If

	'-------------------------------------------------
	' Check if any records were selected
	'-------------------------------------------------
	If iRecTotal = 0 Then
		Call MyPrint("No records found - table skipped.")
		Close Table sSelectName
		Exit Sub
	End If

	Call MyPrint("" + iRecTotal + " records selected.")

	'-------------------------------------------------
	' Save the local table
	'-------------------------------------------------
	Call MyPrint("Saving local table ...")
	sCmd = "Commit Table " + sSelectName + " As " + Chr$(34) + sLocalPath + "\" + sLocalName + ".tab" + Chr$(34) + " TYPE NATIVE Charset " + Chr$(34) + "WindowsLatin1" + Chr$(34)
	Run Command (sCmd)

	'-------------------------------------------------
	' Close the selection table
	'-------------------------------------------------
	Close Table Selection

	'-------------------------------------------------
	' Close the local table and re-open it (as it seems
	' to get locked somehow and won't drop)
	'-------------------------------------------------
	Close Table sSelectName
	sCmd = "Open Table " + Chr$(34) + sLocalPath + "\" + sLocalName + ".tab" + Chr$(34) + " As " + sSelectName
	Run Command (sCmd)

	'-------------------------------------------------
	' If the table doesn't already contain the
	' map label column
	'-------------------------------------------------
	If SelectedMap.LabelColumn <> ""
	And ColumnExists(sSelectName, SelectedMap.LabelColumn) = False Then

		'-------------------------------------------------
		' If the map label column is needed for the
		' combined sites table, or the export file, or
		' it is to be overwritten
		'-------------------------------------------------
		If (iCombinedSitesTable > 1 And Instr(1, SelectedMap.SiteColumns, SelectedMap.LabelColumn) = 0)
		Or (Instr(1, SelectedMap.Columns, SelectedMap.LabelColumn) = 0)
		Or (iOverwriteLabels > 1) Then
			
			'-------------------------------------------------
			' Add the column to the combined sites table
			'-------------------------------------------------
			Call MyPrint("Adding column " + SelectedMap.LabelColumn + "...")
			sCmd = "Alter Table " + sSelectName + " ( Add " + SelectedMap.LabelColumn + " Char(10) )"
			Run Command (sCmd)
		
		End If

	End If

	'-------------------------------------------------
	' If the user wants to overwrite the map labels,
	' and this table allows it, then overwrite them
	'-------------------------------------------------
	If iOverwriteLabels > 1	And UCase$(SelectedMap.Overwrite) = "YES" Then

		'-------------------------------------------------
		' Reset the map label counter if a running total
		' is not required for a combined sites table
		'-------------------------------------------------
		If iOverwriteLabels = 2 Then
			iMapLabelCounter = 1
		End If

		'-------------------------------------------------
		' Overwrite the map labels (adding the map
		' label column if required)
		'-------------------------------------------------
		Call OverwriteMapLabels(sSelectName, SelectedMap.KeyColumn, SelectedMap.LabelColumn)

	End If

	'-------------------------------------------------
	' If a combined sites table is required, and
	' there are columns from this table to add,
	' then add the column details
	'-------------------------------------------------
	If iCombinedSitesTable > 1 And SelectedMap.SiteColumns <> "" Then

		'-------------------------------------------------
		' Add the site details to the combined sites
		' table
		'-------------------------------------------------
		Call AddToCombinedSitesTable(sSelectName, SelectedMap.SiteColumns, SelectedMap.SiteCriteria)
		
	End If

	'-------------------------------------------------
	' Check if the search radius is to be included
	' in the export columns
	'-------------------------------------------------
	Dim sColumns As String
	sColumns = SelectedMap.Columns
	If Instr(1, sColumns, "%Radius%") > 0 Then
		Call MyPrint("Including search radius in table output ...")
		sColumns = StringReplace(sColumns, "%Radius%", """" + sBufferSize + sBufferUnit + """ " + """Radius""")
	End If

	'-------------------------------------------------
	' Check if the overlap area is to be included
	' in the export columns
	'-------------------------------------------------
	If Instr(1, sColumns, "%Overlap%") > 0 Then
		Call MyPrint("Including overlap area in table output ...")

		If InStr(1, SelectedMap.ExportCriteria, "Group By") > 0 Then
			sColumns = StringReplace(sColumns, "%Overlap%", "Sum(CartesianArea(Overlap(" + sSelectName + ".Obj, " + sBufferTable + ".Obj), ""Hectare"")) ""Overlap""")
		Else
			sColumns = StringReplace(sColumns, "%Overlap%", "CartesianArea(Overlap(" + sSelectName + ".Obj, " + sBufferTable + ".Obj), ""Hectare"") ""Overlap""")
		End If
	End If

	'-------------------------------------------------
	' Execute the SQL statement to select only the
	' table columns required for the export into
	' a temporary table
	'-------------------------------------------------
	Call MyPrint("Executing selection for export ...")
	sCmd = "Select " + sColumns + " From " + sSelectName + ", " + sBufferTable + " Where " + sSelectName + ".obj Intersects " + sBufferTable + ".obj " + SelectedMap.ExportCriteria + " Into " + sExportTemp
	Run Command (sCmd)

	'-------------------------------------------------
	' Count the number of records that have
	' been selected for export
	'-------------------------------------------------
	iRecTotal = TableInfo(sExportTemp, TAB_INFO_NROWS)

	'-------------------------------------------------
	' Check if any records were selected
	'-------------------------------------------------
	If iRecTotal = 0 Then
		Call MyPrint("No records found for export - table skipped.")
		Close Table sExportTemp
		Exit Sub
	End If

	Call MyPrint("" + iRecTotal + " records to be exported.")

	'-------------------------------------------------
	' Export the temporary table as a DBF file
	'-------------------------------------------------
	If UCase$(SelectedMap.Format) = "DBF" Then
		Call MyPrint("Exporting as a DBF file ...")
		Export sExportTemp
			Into sLocalPath + "\" + sExportName + ".dbf"
			Type "DBF"
			CharSet "WindowsLatin1"
			Overwrite
	End If

	'-------------------------------------------------
	' Export the temporary table as a TXT file
	'-------------------------------------------------
	If UCase$(SelectedMap.Format) = "TXT" Then
		Call MyPrint("Exporting as a TXT file ...")
		Export sExportTemp
			Into sLocalPath + "\" + sExportName + ".txt"
			Type "ASCII"
			Delimiter ","
			CharSet "WindowsLatin1"
			Overwrite
	End If

	'-------------------------------------------------
	' Export the temporary table as a CSV file
	'-------------------------------------------------
	If UCase$(SelectedMap.Format) = "CSV" Then
		Call MyPrint("Exporting as a CSV file ...")
		Export sExportTemp
			Into sLocalPath + "\" + sExportName + ".csv"
			Type "CSV"
			CharSet "WindowsLatin1"
			Titles
			Overwrite
	End If

	'-------------------------------------------------
	' Close the temporary table
	'-------------------------------------------------
	If TableIsOpen(sExportTemp) Then
		Close Table sExportTemp
	End If
	
	'-------------------------------------------------
	' If the local table is not required then
	' delete it, otherwise close it
	'-------------------------------------------------
	If UCase$(SelectedMap.Keep) <> "YES" Then
		Drop Table sSelectName
	Else
		Close Table sSelectName
	End If
		
	'-------------------------------------------------
	' Add the local table to the map if required
	'-------------------------------------------------
	If iAddSelectedTables > 1 And UCase$(SelectedMap.Keep) = "YES" Then
		
		'-------------------------------------------------
		' Re-open the selection table with the correct
		' name
		'-------------------------------------------------
		sCmd = "Open Table " + Chr$(34) + sLocalPath + "\" + sLocalName + ".tab" + Chr$(34) + " As " + sLocalName
		Run Command (sCmd)
	
		'-------------------------------------------------
		' Add the local table to the same window that
		' the original table is mapped in, otherwise
		' add it to the active map window
		'-------------------------------------------------
		Dim bTableAdded As Logical
		bTableAdded = False
		Dim iWindowNum As Integer
		For iWindowNum = 1 to iNumWindows
		
			'-------------------------------------------------
			' Find the layer number for the original table
			'-------------------------------------------------
			Dim iNumTables As Integer
			iNumTables = MapperInfo(aWindowId(iWindowNum), MAPPER_INFO_LAYERS)
			Dim	iNumTable As Integer, bMapFound As Logical
			bMapFound = False
			For iNumTable = 1 to iNumTables
				If LayerInfo(aWindowId(iWindowNum),iNumTable, LAYER_INFO_NAME) = SelectedMap.Name Then
					bMapFound = True
					Exit For
				End If
			Next
		
			'-------------------------------------------------
			' If the original table was found then add
			' the local table to the same map window
			'-------------------------------------------------
			If bMapFound = True Then

				'-------------------------------------------------
				' Add a group layer if one doesn't already exist
				'-------------------------------------------------
				If aWindowGroup(iWindowNum) = "" Then
					Call MyPrint("Adding group layer '" + sGroupLayer + "' to map window " + iWindowNum + " ...")

					sCmd = "Add Map Window " + aWindowId(iWindowNum) + " GroupLayer(" + Chr$(34) + sGroupLayer + Chr$(34) + ")"
					Run Command (sCmd)
					
					' Store the name of the group layer for the window
					aWindowGroup(iWindowNum) = sGroupLayer
				End If

				'-------------------------------------------------
				' Add the local table to the same map window
				'-------------------------------------------------
				Call MyPrint("Adding layer to map window " + iWindowNum + " ...")

				If aWindowGroup(iWindowNum) = sGroupLayer Then
					sCmd = "Add Map Window " + aWindowId(iWindowNum) + " Layer " + sLocalName + " DestGroupLayer " + Chr$(34) + sGroupLayer + Chr$(34) + " Position 999"
					Run Command (sCmd)
				Else
					sCmd = "Add Map Window " + aWindowId(iWindowNum) + " Layer " + sLocalName
					Run Command (sCmd)
				End If

				'-------------------------------------------------
				' If the layer is to be added with labels ...
				'-------------------------------------------------
				If iAddSelectedTables = 3 Then
	
					'-------------------------------------------------
					' If the table doesn't contain the map label
					' column then don't use it for the labels
					'-------------------------------------------------
					If ColumnExists(sLocalName, SelectedMap.LabelColumn) = False Then
						SelectedMap.LabelColumn = ""
						SelectedMap.LabelClause = ""
					End If
						
					'-------------------------------------------------
					' Set the map label clause if not already set
					'-------------------------------------------------
					If SelectedMap.LabelClause = "" Then
						If SelectedMap.LabelColumn = "" Then
							SelectedMap.LabelClause = "Auto On"
						Else
							SelectedMap.LabelClause = "With " + SelectedMap.LabelColumn + " Auto On"
						End If
					End If
	
					'-------------------------------------------------
					' Display the labels for the layer
					'-------------------------------------------------
					sCmd = "Set Map Window " + aWindowId(iWindowNum) + " Layer " + sLocalName + " Label " + SelectedMap.LabelClause
					Run Command (sCmd)
	
				End If

				'-------------------------------------------------
				' Indicate that the table has now been added to
				' at least one map window.
				'-------------------------------------------------
				bTableAdded = True

			End If
		
		Next

		'-------------------------------------------------
		' If the local table has not been added to any
		' map windows
		'-------------------------------------------------
		If bTableAdded = False Then

			'-------------------------------------------------
			' Get the id of the active window
			'-------------------------------------------------
			Dim iWindowId As Integer
			iWindowId = FrontWindow()

			'-------------------------------------------------
			' If there is an active window
			'-------------------------------------------------
			If iWindowId > 0 Then
				
				'-------------------------------------------------
				' Add the local table to the map window
				'-------------------------------------------------
				Call MyPrint("Adding layer to active map window ...")
				Add Map Window iWindowId Layer sLocalName
	
				'-------------------------------------------------
				' If the layer is to be added with labels ...
				'-------------------------------------------------
				If iAddSelectedTables = 3 Then
	
					'-------------------------------------------------
					' If the table doesn't contain the map label
					' column then don't use it for the labels
					'-------------------------------------------------
					If ColumnExists(sLocalName, SelectedMap.LabelColumn) = False Then
						SelectedMap.LabelColumn = ""
						SelectedMap.LabelClause = ""
					End If
						
					'-------------------------------------------------
					' Set the map label clause if not already set
					'-------------------------------------------------
					If SelectedMap.LabelClause = "" Then
						If SelectedMap.LabelColumn = "" Then
							SelectedMap.LabelClause = "Auto On"
						Else
							SelectedMap.LabelClause = "With " + SelectedMap.LabelColumn + " Auto On"
						End If
					End If
	
					'-------------------------------------------------
					' Display the labels for the layer
					'-------------------------------------------------
					Call MyPrint("Setting labels for layer ...")
					sCmd = "Set Map Window " + iWindowId + " Layer " + sLocalName + " Label " + SelectedMap.LabelClause
					Run Command (sCmd)
	
				End If
		
			End If
			
		End If
		
	End If

	Exit Sub

GroupError:
	Call MyPrint(str$(Err()) + ": " + Error$())
	Resume Next

ErrorTrap:
	Note "Error: " + str$(Err()) + ": " + Error$()
	Call MyPrint(str$(Err()) + ": " + Error$())
	Exit Sub

End Sub

Sub OverwriteMapLabels
	(sTableName As String,
	sKeyColumn As String,
	sLabelColumn As String)
'***************************************************************
'* Overwrite the map label column with an incremental
'* number starting from the counter
'***************************************************************

	'-------------------------------------------------
	' Trap errors
	'-------------------------------------------------
	OnError Goto ErrorTrap

	Dim sCmd as String

	Set ProgressBars Off

	'-------------------------------------------------
	' Select the map label column so that it can
	' be updated
	'-------------------------------------------------
	sCmd = "Select * From " + sTableName + " Into MapLabels NoSelect"
	Run Command (sCmd)

	'-------------------------------------------------
	' Count the number of rows selected
	'-------------------------------------------------
	Dim iRows As Integer
	iRows = TableInfo(MapLabels, TAB_INFO_NROWS)

	Call MyPrint("Overwritting map labels for " + FormatNumber$(iRows) + " rows ...")

	'-------------------------------------------------
	' If any rows were selected then set the object
	'-------------------------------------------------
	If iRows > 0 Then

		'-------------------------------------------------
		' Set the key column alias
		'-------------------------------------------------
		Dim nKeyCol As Alias
		If sKeyColumn = "" Then
			sKeyColumn = "Col1"
		End If
		nKeyCol = sTableName + "." + sKeyColumn

		'-------------------------------------------------
		' Fetch the first of the selected rows
		'-------------------------------------------------
		Fetch First from MapLabels

		'-------------------------------------------------
		' Loop through all the selected rows setting the
		' map label
		'-------------------------------------------------
		Dim iRow as Integer
		iRow = 1
		
		Dim sKeyValue As String
		Do while iRow <= iRows

			'-------------------------------------------------
			' Get the row key value
			'-------------------------------------------------
			sKeyValue = nKeyCol

			'-------------------------------------------------
			' Update the row in the table
			'-------------------------------------------------
			sCmd = "Update MapLabels Set " + sLabelColumn + " = " + iMapLabelCounter + " Where RowID = " + iRow
			Run Command (sCmd)

			'-------------------------------------------------
			' Fetch the next of the selected rows
			'-------------------------------------------------
			Fetch next from MapLabels
			
			iRow = iRow + 1

			'-------------------------------------------------
			' Increment the label counter if the row
			' key value has changed
			'-------------------------------------------------
			If sKeyValue <> nKeyCol Then
				iMapLabelCounter = iMapLabelCounter + 1
			End If

		Loop

		'-------------------------------------------------
		' Save the updates
		'-------------------------------------------------
		sCmd = "Commit Table MapLabels"
		Run Command (sCmd)

	End If

CleanUp:

	Set ProgressBars On

	'-------------------------------------------------
	' Close the temporary MapLabels table if it is
	' already/still open in the current MapInfo session
	'-------------------------------------------------
	If TableIsOpen("MapLabels") Then
		Close Table MapLabels
	End If

	'-------------------------------------------------
	' Close the the Selection table if it is
	' already/still open in the current MapInfo session
	'-------------------------------------------------
	If TableIsOpen("Selection") Then
		Close Table Selection
	End If

	'-------------------------------------------------
	' Unselect all records
	'-------------------------------------------------
	Run Menu command M_QUERY_UNSELECT

	Exit Sub

ErrorTrap:
	Note "Error: " + str$(Err()) + ": " + Error$()
	Call MyPrint(str$(Err()) + ": " + Error$())
	Goto CleanUp

End Sub

Sub AddToCombinedSitesTable
	(sTableName As String,
	sSitesColumns As String,
	sSitesCriteria As String)
'***************************************************************
'* Add the site details to the combined sites table
'***************************************************************

	'-------------------------------------------------
	' Trap errors
	'-------------------------------------------------
	OnError Goto ErrorTrap

	Dim sCmd as String

	Set ProgressBars Off

	'-------------------------------------------------
	' Check if the search radius is to be included
	' in the combined sites table
	'-------------------------------------------------
	If Instr(1, sSitesColumns, "%Radius%") > 0 Then
		sSitesColumns = StringReplace(sSitesColumns, "%Radius%", """" + sBufferSize + sBufferUnit + """ " + """Radius""")
	End If

	'-------------------------------------------------
	' Check if the overlap area is to be included
	' in the combined sites table
	'-------------------------------------------------
	If Instr(1, sSitesColumns, "%Overlap%") > 0 Then
		sSitesColumns = StringReplace(sSitesColumns, "%Overlap%", "Overlap")
	End If

	'-------------------------------------------------
	' Select the site details to be added to the
	' combined sites table
	'-------------------------------------------------
	sCmd = "Select " + sSitesColumns + " From " + sTableName + " " + sSitesCriteria + " Into TempSites NoSelect"
	Run Command (sCmd)

	'-------------------------------------------------
	' Count the number of rows to be inserted
	'-------------------------------------------------
	Dim iRecTotal As Integer
	iRecTotal = TableInfo("TempSites", TAB_INFO_NROWS)

	Call MyPrint("Adding " + iRecTotal + " records to the combined sites table ...")

	'-------------------------------------------------
	' Insert the rows into the combined sites table
	'-------------------------------------------------
	sCmd = "Insert into " + sCombinedSitesTable + " Select * From TempSites"
	Run Command (sCmd)

	'-------------------------------------------------
	' Save the updates
	'-------------------------------------------------
	sCmd = "Commit Table " + sCombinedSitesTable
	Run Command (sCmd)

CleanUp:

	Set ProgressBars On

	'-------------------------------------------------
	' Close the temporary sites table if it is
	' already/still open in the current MapInfo session
	'-------------------------------------------------
	If TableIsOpen("TempSites") Then
		Close Table TempSites
	End If

	'-------------------------------------------------
	' Close the the Selection table if it is
	' already/still open in the current MapInfo session
	'-------------------------------------------------
	If TableIsOpen("Selection") Then
		Close Table Selection
	End If

	'-------------------------------------------------
	' Unselect all records
	'-------------------------------------------------
	Run Menu command M_QUERY_UNSELECT

	Exit Sub

ErrorTrap:
	If Err() = 497 Then
		Note "Error: Unable to select data for Combined Sites Table"
		Call MyPrint("Error: Unable to select data for Combined Sites Table")
	Else
		Note "Error: " + str$(Err()) + ": " + Error$()
		Call MyPrint(str$(Err()) + ": " + Error$())
	End If

	Goto CleanUp

End Sub

Sub AboutBox
'***************************************************************
'* Display the 'About' dialog box
'***************************************************************

	Dialog
		Title "About Data Searches " + sVersion
		Width 230
		Height 115

	Control StaticText
		Title "This program will extract all required GIS layers that"
		Position 10,10
	Control StaticText
		Title "intersect with a given feature with a specified buffer."
		Position 10,20
	Control StaticText
		Title "The user can select which layers to extract from, the"
		Position 10,30
	Control StaticText
		Title "data search feature to select and the buffer to apply."
		Position 10,40
	Control StaticText
		Title "Created by Andy Foy Consulting."
		Position 10,60
	Control StaticText
		Title "Copyright© 2012-2013 GiGL, 2015 - 2016 TVERC, GiGL."
		Position 10,70
	Control OKButton
		Position 185,95

End Sub

Sub MyPrint(ByVal sMsg As String)
'***************************************************************
'* Bespoke print function
'***************************************************************

	'-------------------------------------------------
	' Open the log file for output
	'-------------------------------------------------
	Open File sLogFile For Append As #1

	'-------------------------------------------------
	' Write the message passed to the output file
	'-------------------------------------------------
	Print #1, FormatDate$(CurDate()) + " " + FormatTime$(CurTime(),"HH:mm:ss") + " : " + sMsg

	'-------------------------------------------------
	' Close the output file
	'-------------------------------------------------
	Close File #1

End Sub

Sub PrintLogFile()
'***************************************************************
'* Open the log file in Notepad
'***************************************************************

	'-------------------------------------------------
	' Open the log file in Notepad
	'-------------------------------------------------
	Dim sCmd As String
	sCmd = "Run Program " +  + Chr$(34) + "NotePad.exe " + sLogFile + Chr$(34)
	Run Command (sCmd)

End Sub

Sub egsit
'***************************************************************
'* Exit the program
'***************************************************************

	End Program

End Sub